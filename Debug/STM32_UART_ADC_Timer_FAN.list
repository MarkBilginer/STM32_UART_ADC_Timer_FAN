
STM32_UART_ADC_Timer_FAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f3c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006684  08006684  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006684  08006684  00016684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800668c  0800668c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800668c  0800668c  0001668c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006690  08006690  00016690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000074  08006708  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08006708  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132fc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242c  00000000  00000000  000333a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  000357d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  00036a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229f8  00000000  00000000  00037b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001259b  00000000  00000000  0005a588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db3bc  00000000  00000000  0006cb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147edf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e44  00000000  00000000  00147f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000074 	.word	0x20000074
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080060b0 	.word	0x080060b0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000078 	.word	0x20000078
 80001c8:	080060b0 	.word	0x080060b0

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f0:	f000 b96e 	b.w	80004d0 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	468c      	mov	ip, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	f040 8083 	bne.w	8000322 <__udivmoddi4+0x116>
 800021c:	428a      	cmp	r2, r1
 800021e:	4617      	mov	r7, r2
 8000220:	d947      	bls.n	80002b2 <__udivmoddi4+0xa6>
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	b142      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000228:	f1c2 0020 	rsb	r0, r2, #32
 800022c:	fa24 f000 	lsr.w	r0, r4, r0
 8000230:	4091      	lsls	r1, r2
 8000232:	4097      	lsls	r7, r2
 8000234:	ea40 0c01 	orr.w	ip, r0, r1
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbbc f6f8 	udiv	r6, ip, r8
 8000244:	fa1f fe87 	uxth.w	lr, r7
 8000248:	fb08 c116 	mls	r1, r8, r6, ip
 800024c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000250:	fb06 f10e 	mul.w	r1, r6, lr
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 8119 	bcs.w	8000494 <__udivmoddi4+0x288>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8116 	bls.w	8000494 <__udivmoddi4+0x288>
 8000268:	3e02      	subs	r6, #2
 800026a:	443b      	add	r3, r7
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000280:	45a6      	cmp	lr, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	193c      	adds	r4, r7, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028a:	f080 8105 	bcs.w	8000498 <__udivmoddi4+0x28c>
 800028e:	45a6      	cmp	lr, r4
 8000290:	f240 8102 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029c:	eba4 040e 	sub.w	r4, r4, lr
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	b902      	cbnz	r2, 80002b6 <__udivmoddi4+0xaa>
 80002b4:	deff      	udf	#255	; 0xff
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d150      	bne.n	8000360 <__udivmoddi4+0x154>
 80002be:	1bcb      	subs	r3, r1, r7
 80002c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c4:	fa1f f887 	uxth.w	r8, r7
 80002c8:	2601      	movs	r6, #1
 80002ca:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ce:	0c21      	lsrs	r1, r4, #16
 80002d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d8:	fb08 f30c 	mul.w	r3, r8, ip
 80002dc:	428b      	cmp	r3, r1
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0xe4>
 80002e0:	1879      	adds	r1, r7, r1
 80002e2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0xe2>
 80002e8:	428b      	cmp	r3, r1
 80002ea:	f200 80e9 	bhi.w	80004c0 <__udivmoddi4+0x2b4>
 80002ee:	4684      	mov	ip, r0
 80002f0:	1ac9      	subs	r1, r1, r3
 80002f2:	b2a3      	uxth	r3, r4
 80002f4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002fc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000300:	fb08 f800 	mul.w	r8, r8, r0
 8000304:	45a0      	cmp	r8, r4
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0x10c>
 8000308:	193c      	adds	r4, r7, r4
 800030a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x10a>
 8000310:	45a0      	cmp	r8, r4
 8000312:	f200 80d9 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 8000316:	4618      	mov	r0, r3
 8000318:	eba4 0408 	sub.w	r4, r4, r8
 800031c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000320:	e7bf      	b.n	80002a2 <__udivmoddi4+0x96>
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0x12e>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80b1 	beq.w	800048e <__udivmoddi4+0x282>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x1cc>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0x140>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80b8 	bhi.w	80004bc <__udivmoddi4+0x2b0>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0103 	sbc.w	r1, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	468c      	mov	ip, r1
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0a8      	beq.n	80002ac <__udivmoddi4+0xa0>
 800035a:	e9c5 4c00 	strd	r4, ip, [r5]
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0xa0>
 8000360:	f1c2 0320 	rsb	r3, r2, #32
 8000364:	fa20 f603 	lsr.w	r6, r0, r3
 8000368:	4097      	lsls	r7, r2
 800036a:	fa01 f002 	lsl.w	r0, r1, r2
 800036e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000372:	40d9      	lsrs	r1, r3
 8000374:	4330      	orrs	r0, r6
 8000376:	0c03      	lsrs	r3, r0, #16
 8000378:	fbb1 f6fe 	udiv	r6, r1, lr
 800037c:	fa1f f887 	uxth.w	r8, r7
 8000380:	fb0e 1116 	mls	r1, lr, r6, r1
 8000384:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000388:	fb06 f108 	mul.w	r1, r6, r8
 800038c:	4299      	cmp	r1, r3
 800038e:	fa04 f402 	lsl.w	r4, r4, r2
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x19c>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800039a:	f080 808d 	bcs.w	80004b8 <__udivmoddi4+0x2ac>
 800039e:	4299      	cmp	r1, r3
 80003a0:	f240 808a 	bls.w	80004b8 <__udivmoddi4+0x2ac>
 80003a4:	3e02      	subs	r6, #2
 80003a6:	443b      	add	r3, r7
 80003a8:	1a5b      	subs	r3, r3, r1
 80003aa:	b281      	uxth	r1, r0
 80003ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b8:	fb00 f308 	mul.w	r3, r0, r8
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0x1c4>
 80003c0:	1879      	adds	r1, r7, r1
 80003c2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003c6:	d273      	bcs.n	80004b0 <__udivmoddi4+0x2a4>
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d971      	bls.n	80004b0 <__udivmoddi4+0x2a4>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4439      	add	r1, r7
 80003d0:	1acb      	subs	r3, r1, r3
 80003d2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d6:	e778      	b.n	80002ca <__udivmoddi4+0xbe>
 80003d8:	f1c6 0c20 	rsb	ip, r6, #32
 80003dc:	fa03 f406 	lsl.w	r4, r3, r6
 80003e0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e4:	431c      	orrs	r4, r3
 80003e6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f6:	431f      	orrs	r7, r3
 80003f8:	0c3b      	lsrs	r3, r7, #16
 80003fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fe:	fa1f f884 	uxth.w	r8, r4
 8000402:	fb0e 1119 	mls	r1, lr, r9, r1
 8000406:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040a:	fb09 fa08 	mul.w	sl, r9, r8
 800040e:	458a      	cmp	sl, r1
 8000410:	fa02 f206 	lsl.w	r2, r2, r6
 8000414:	fa00 f306 	lsl.w	r3, r0, r6
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x220>
 800041a:	1861      	adds	r1, r4, r1
 800041c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000420:	d248      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000422:	458a      	cmp	sl, r1
 8000424:	d946      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 8000426:	f1a9 0902 	sub.w	r9, r9, #2
 800042a:	4421      	add	r1, r4
 800042c:	eba1 010a 	sub.w	r1, r1, sl
 8000430:	b2bf      	uxth	r7, r7
 8000432:	fbb1 f0fe 	udiv	r0, r1, lr
 8000436:	fb0e 1110 	mls	r1, lr, r0, r1
 800043a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043e:	fb00 f808 	mul.w	r8, r0, r8
 8000442:	45b8      	cmp	r8, r7
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x24a>
 8000446:	19e7      	adds	r7, r4, r7
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d22e      	bcs.n	80004ac <__udivmoddi4+0x2a0>
 800044e:	45b8      	cmp	r8, r7
 8000450:	d92c      	bls.n	80004ac <__udivmoddi4+0x2a0>
 8000452:	3802      	subs	r0, #2
 8000454:	4427      	add	r7, r4
 8000456:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045a:	eba7 0708 	sub.w	r7, r7, r8
 800045e:	fba0 8902 	umull	r8, r9, r0, r2
 8000462:	454f      	cmp	r7, r9
 8000464:	46c6      	mov	lr, r8
 8000466:	4649      	mov	r1, r9
 8000468:	d31a      	bcc.n	80004a0 <__udivmoddi4+0x294>
 800046a:	d017      	beq.n	800049c <__udivmoddi4+0x290>
 800046c:	b15d      	cbz	r5, 8000486 <__udivmoddi4+0x27a>
 800046e:	ebb3 020e 	subs.w	r2, r3, lr
 8000472:	eb67 0701 	sbc.w	r7, r7, r1
 8000476:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047a:	40f2      	lsrs	r2, r6
 800047c:	ea4c 0202 	orr.w	r2, ip, r2
 8000480:	40f7      	lsrs	r7, r6
 8000482:	e9c5 2700 	strd	r2, r7, [r5]
 8000486:	2600      	movs	r6, #0
 8000488:	4631      	mov	r1, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e70b      	b.n	80002ac <__udivmoddi4+0xa0>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e9      	b.n	800026c <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fd      	b.n	8000298 <__udivmoddi4+0x8c>
 800049c:	4543      	cmp	r3, r8
 800049e:	d2e5      	bcs.n	800046c <__udivmoddi4+0x260>
 80004a0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a4:	eb69 0104 	sbc.w	r1, r9, r4
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7df      	b.n	800046c <__udivmoddi4+0x260>
 80004ac:	4608      	mov	r0, r1
 80004ae:	e7d2      	b.n	8000456 <__udivmoddi4+0x24a>
 80004b0:	4660      	mov	r0, ip
 80004b2:	e78d      	b.n	80003d0 <__udivmoddi4+0x1c4>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e7b9      	b.n	800042c <__udivmoddi4+0x220>
 80004b8:	4666      	mov	r6, ip
 80004ba:	e775      	b.n	80003a8 <__udivmoddi4+0x19c>
 80004bc:	4630      	mov	r0, r6
 80004be:	e74a      	b.n	8000356 <__udivmoddi4+0x14a>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	4439      	add	r1, r7
 80004c6:	e713      	b.n	80002f0 <__udivmoddi4+0xe4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	443c      	add	r4, r7
 80004cc:	e724      	b.n	8000318 <__udivmoddi4+0x10c>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <set_is_exit>:

uint8_t mode_change = 0;
uint8_t current_mode = 0;
uint8_t previous_mode = 0;

void set_is_exit(uint8_t val){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	is_exit = val;
 80004de:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <set_is_exit+0x1c>)
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	7013      	strb	r3, [r2, #0]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	20000090 	.word	0x20000090

080004f4 <get_is_exit>:

uint8_t get_is_exit(){
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	return is_exit;
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <get_is_exit+0x14>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000090 	.word	0x20000090

0800050c <calculate_pulse_width_fan_control>:
}
void convert_digits_to_number(char* number, char* duty_cycle){
	sprintf(number, "%s%s", duty_cycle[0], duty_cycle[1]);
}

uint8_t calculate_pulse_width_fan_control(uint8_t duty_percent){
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]

	float pulse_width = (duty_percent * 200) / ((float) 100);
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	22c8      	movs	r2, #200	; 0xc8
 800051a:	fb02 f303 	mul.w	r3, r2, r3
 800051e:	ee07 3a90 	vmov	s15, r3
 8000522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000526:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000550 <calculate_pulse_width_fan_control+0x44>
 800052a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800052e:	edc7 7a03 	vstr	s15, [r7, #12]

	return pulse_width;
 8000532:	edd7 7a03 	vldr	s15, [r7, #12]
 8000536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800053a:	edc7 7a00 	vstr	s15, [r7]
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	b2db      	uxtb	r3, r3
}
 8000542:	4618      	mov	r0, r3
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	42c80000 	.word	0x42c80000

08000554 <adjust_tim1_pulse_width>:

uint32_t calculate_pulse_width(uint8_t *fan_speed){
	return calculate_duty_cycle(convert_digits_to_number1(*fan_speed));
}

void adjust_tim1_pulse_width(uint32_t pulse_width){
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	htim1.Instance->CCR3 = pulse_width;
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <adjust_tim1_pulse_width+0x1c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	200000fc 	.word	0x200000fc

08000574 <print_fan_speed_result>:

void print_fan_speed_result(){
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0
	char *fan_speed_str_l = &fan_speed_str[0];
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <print_fan_speed_result+0x50>)
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
	char str1[] = "Setting fan speed to ";
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <print_fan_speed_result+0x54>)
 8000580:	f107 040c 	add.w	r4, r7, #12
 8000584:	461d      	mov	r5, r3
 8000586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800058e:	6020      	str	r0, [r4, #0]
 8000590:	3404      	adds	r4, #4
 8000592:	8021      	strh	r1, [r4, #0]
	char str2[] = "% power.\r\n";
 8000594:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <print_fan_speed_result+0x58>)
 8000596:	463b      	mov	r3, r7
 8000598:	ca07      	ldmia	r2, {r0, r1, r2}
 800059a:	c303      	stmia	r3!, {r0, r1}
 800059c:	801a      	strh	r2, [r3, #0]
 800059e:	3302      	adds	r3, #2
 80005a0:	0c12      	lsrs	r2, r2, #16
 80005a2:	701a      	strb	r2, [r3, #0]

	print_message(str1);
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 f901 	bl	80007b0 <print_message>
	print_message(fan_speed_str_l);
 80005ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80005b0:	f000 f8fe 	bl	80007b0 <print_message>
	print_message(str2);
 80005b4:	463b      	mov	r3, r7
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f8fa 	bl	80007b0 <print_message>
}
 80005bc:	bf00      	nop
 80005be:	3728      	adds	r7, #40	; 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bdb0      	pop	{r4, r5, r7, pc}
 80005c4:	20000000 	.word	0x20000000
 80005c8:	080060d0 	.word	0x080060d0
 80005cc:	080060e8 	.word	0x080060e8

080005d0 <get_fan_speed_int>:

uint8_t get_fan_speed_int(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	char *fan_speed_str_l = &fan_speed_str[0];
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <get_fan_speed_int+0x1c>)
 80005d8:	607b      	str	r3, [r7, #4]
	return atoi(fan_speed_str_l);
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f005 fc47 	bl	8005e6e <atoi>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b2db      	uxtb	r3, r3
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000000 	.word	0x20000000

080005f0 <receive_input_fan_speed>:
	return fan_speed_received;
}
void reset_fan_speed_received(){
	fan_speed_received = 0;
}
void receive_input_fan_speed(){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	//pointer might need to be incremented to show whole result
	char *fan_speed_str_l = &fan_speed_str[0];
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <receive_input_fan_speed+0x68>)
 80005f8:	607b      	str	r3, [r7, #4]

	if(current_mode == 1){
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <receive_input_fan_speed+0x6c>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d126      	bne.n	8000650 <receive_input_fan_speed+0x60>
		HAL_UART_Receive(&huart2,(uint8_t *) fan_speed_str_l, strlen(fan_speed_str_l), HAL_MAX_DELAY);
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f7ff fde2 	bl	80001cc <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29a      	uxth	r2, r3
 800060c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	4813      	ldr	r0, [pc, #76]	; (8000660 <receive_input_fan_speed+0x70>)
 8000614:	f004 ffe7 	bl	80055e6 <HAL_UART_Receive>
		uint8_t fan_speed = get_fan_speed_int();
 8000618:	f7ff ffda 	bl	80005d0 <get_fan_speed_int>
 800061c:	4603      	mov	r3, r0
 800061e:	70fb      	strb	r3, [r7, #3]
		if(fan_speed >= 0 && fan_speed <= 100){
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	2b64      	cmp	r3, #100	; 0x64
 8000624:	d80f      	bhi.n	8000646 <receive_input_fan_speed+0x56>
			print_fan_speed_result();
 8000626:	f7ff ffa5 	bl	8000574 <print_fan_speed_result>
			adjust_tim1_pulse_width(calculate_pulse_width_fan_control(fan_speed));
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff6d 	bl	800050c <calculate_pulse_width_fan_control>
 8000632:	4603      	mov	r3, r0
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff8d 	bl	8000554 <adjust_tim1_pulse_width>
			tim2_base_stop_interrupt();
 800063a:	f000 fc43 	bl	8000ec4 <tim2_base_stop_interrupt>
			print_message("Continue? Enter a mode:\r\n");
 800063e:	4809      	ldr	r0, [pc, #36]	; (8000664 <receive_input_fan_speed+0x74>)
 8000640:	f000 f8b6 	bl	80007b0 <print_message>
		else{
			print_message("Invalid fan_speed has been entered. Try again:\r\n");
			receive_input_fan_speed();
		}
	}
}
 8000644:	e004      	b.n	8000650 <receive_input_fan_speed+0x60>
			print_message("Invalid fan_speed has been entered. Try again:\r\n");
 8000646:	4808      	ldr	r0, [pc, #32]	; (8000668 <receive_input_fan_speed+0x78>)
 8000648:	f000 f8b2 	bl	80007b0 <print_message>
			receive_input_fan_speed();
 800064c:	f7ff ffd0 	bl	80005f0 <receive_input_fan_speed>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000000 	.word	0x20000000
 800065c:	20000095 	.word	0x20000095
 8000660:	20000194 	.word	0x20000194
 8000664:	080060f4 	.word	0x080060f4
 8000668:	08006110 	.word	0x08006110

0800066c <print_fan_control_result>:

void print_fan_control_result(){
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
	uint8_t *fan_control_l = &fan_control[0];
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <print_fan_control_result+0x30>)
 8000674:	607b      	str	r3, [r7, #4]
	if(*fan_control_l == '1'){
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b31      	cmp	r3, #49	; 0x31
 800067c:	d103      	bne.n	8000686 <print_fan_control_result+0x1a>
		print_message("You have selected \“fan control via terminal\”.\r\n");
 800067e:	4808      	ldr	r0, [pc, #32]	; (80006a0 <print_fan_control_result+0x34>)
 8000680:	f000 f896 	bl	80007b0 <print_message>
		print_message("You have selected \“fan control via potentiometer\”.\r\n");
	}
	else{
		//print_message("You have entered an invalid fan control option. Try again...\r\n");
	}
}
 8000684:	e006      	b.n	8000694 <print_fan_control_result+0x28>
	else if(*fan_control_l == '2'){
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b32      	cmp	r3, #50	; 0x32
 800068c:	d102      	bne.n	8000694 <print_fan_control_result+0x28>
		print_message("You have selected \“fan control via potentiometer\”.\r\n");
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <print_fan_control_result+0x38>)
 8000690:	f000 f88e 	bl	80007b0 <print_message>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000094 	.word	0x20000094
 80006a0:	08006144 	.word	0x08006144
 80006a4:	08006178 	.word	0x08006178

080006a8 <receive_input_fan_control>:
}
void reset_fan_control_received(){
	fan_control_received = 0;
}

void receive_input_fan_control(){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

	uint8_t *fan_control_l = &fan_control[0];
 80006ae:	4b20      	ldr	r3, [pc, #128]	; (8000730 <receive_input_fan_control+0x88>)
 80006b0:	607b      	str	r3, [r7, #4]

	//print_message("Input 1 for terminal input and 2 for potentiometer control:\r\n");
	if(HAL_UART_Receive(&huart2, fan_control_l, sizeof(*fan_control_l), HAL_MAX_DELAY) == HAL_OK){
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b6:	2201      	movs	r2, #1
 80006b8:	6879      	ldr	r1, [r7, #4]
 80006ba:	481e      	ldr	r0, [pc, #120]	; (8000734 <receive_input_fan_control+0x8c>)
 80006bc:	f004 ff93 	bl	80055e6 <HAL_UART_Receive>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d130      	bne.n	8000728 <receive_input_fan_control+0x80>

		uint8_t input_mode = *fan_control_l - '0';
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	3b30      	subs	r3, #48	; 0x30
 80006cc:	70fb      	strb	r3, [r7, #3]
		if(input_mode == 1 || input_mode == 2){
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d002      	beq.n	80006da <receive_input_fan_control+0x32>
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d110      	bne.n	80006fc <receive_input_fan_control+0x54>
			print_fan_control_result();
 80006da:	f7ff ffc7 	bl	800066c <print_fan_control_result>
			set_current_mode(input_mode);
 80006de:	78fb      	ldrb	r3, [r7, #3]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fa23 	bl	8000b2c <set_current_mode>
			tim1_complement_pwm_start();
 80006e6:	f000 fbcf 	bl	8000e88 <tim1_complement_pwm_start>
			tim2_options_init(get_current_mode());
 80006ea:	f000 fa2f 	bl	8000b4c <get_current_mode>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f849 	bl	8000788 <tim2_options_init>
			tim2_base_start_interrupt();
 80006f6:	f000 fbdb 	bl	8000eb0 <tim2_base_start_interrupt>
			print_message("You have entered an invalid fan control option. Try again...\r\n");
			receive_input_fan_control();
		}
	}

}
 80006fa:	e015      	b.n	8000728 <receive_input_fan_control+0x80>
		else if(input_mode == 0){
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d10d      	bne.n	800071e <receive_input_fan_control+0x76>
			print_message("Exiting_program...\r\n");
 8000702:	480d      	ldr	r0, [pc, #52]	; (8000738 <receive_input_fan_control+0x90>)
 8000704:	f000 f854 	bl	80007b0 <print_message>
			tim1_complement_pwm_stop(); // doesnt work start function gets called in app.
 8000708:	f000 fbc8 	bl	8000e9c <tim1_complement_pwm_stop>
			tim2_base_stop_interrupt();// doesnt work start function gets called in app.
 800070c:	f000 fbda 	bl	8000ec4 <tim2_base_stop_interrupt>
			set_is_exit(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f7ff fedf 	bl	80004d4 <set_is_exit>
			print_message("Exit accomplished.\r\n");
 8000716:	4809      	ldr	r0, [pc, #36]	; (800073c <receive_input_fan_control+0x94>)
 8000718:	f000 f84a 	bl	80007b0 <print_message>
}
 800071c:	e004      	b.n	8000728 <receive_input_fan_control+0x80>
			print_message("You have entered an invalid fan control option. Try again...\r\n");
 800071e:	4808      	ldr	r0, [pc, #32]	; (8000740 <receive_input_fan_control+0x98>)
 8000720:	f000 f846 	bl	80007b0 <print_message>
			receive_input_fan_control();
 8000724:	f7ff ffc0 	bl	80006a8 <receive_input_fan_control>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000094 	.word	0x20000094
 8000734:	20000194 	.word	0x20000194
 8000738:	080061b4 	.word	0x080061b4
 800073c:	080061cc 	.word	0x080061cc
 8000740:	080061e4 	.word	0x080061e4

08000744 <init_tim2_terminal>:

void init_tim2_terminal(){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af02      	add	r7, sp, #8
	//for a 5sec interval
	init_tim2(999, TIM_COUNTERMODE_UP, 159999, TIM_CLOCKDIVISION_DIV1, TIM_AUTORELOAD_PRELOAD_ENABLE);
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	2300      	movs	r3, #0
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <init_tim2_terminal+0x20>)
 8000752:	2100      	movs	r1, #0
 8000754:	f240 30e7 	movw	r0, #999	; 0x3e7
 8000758:	f000 fa14 	bl	8000b84 <init_tim2>
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	000270ff 	.word	0x000270ff

08000768 <init_tim2_potentiometer>:

void init_tim2_potentiometer(){
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af02      	add	r7, sp, #8
	//for a 1 sec interval
	init_tim2(999, TIM_COUNTERMODE_UP, 31999, TIM_CLOCKDIVISION_DIV1, TIM_AUTORELOAD_PRELOAD_ENABLE);
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2300      	movs	r3, #0
 8000774:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000778:	2100      	movs	r1, #0
 800077a:	f240 30e7 	movw	r0, #999	; 0x3e7
 800077e:	f000 fa01 	bl	8000b84 <init_tim2>
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <tim2_options_init>:

void tim2_options_init(uint8_t option){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	if(option == 1){
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d102      	bne.n	800079e <tim2_options_init+0x16>
		init_tim2_terminal();
 8000798:	f7ff ffd4 	bl	8000744 <init_tim2_terminal>
		init_tim2_potentiometer();
	}
	else{

	}
}
 800079c:	e004      	b.n	80007a8 <tim2_options_init+0x20>
	else if(option == 2){
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d101      	bne.n	80007a8 <tim2_options_init+0x20>
		init_tim2_potentiometer();
 80007a4:	f7ff ffe0 	bl	8000768 <init_tim2_potentiometer>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <print_message>:

void print_message(char msg[]){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), 100);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff fd07 	bl	80001cc <strlen>
 80007be:	4603      	mov	r3, r0
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	2364      	movs	r3, #100	; 0x64
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <print_message+0x24>)
 80007c8:	f004 fe79 	bl	80054be <HAL_UART_Transmit>
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000194 	.word	0x20000194

080007d8 <init_hal>:

void init_hal(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_Init();
 80007dc:	f000 fda7 	bl	800132e <HAL_Init>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <config_system_clock>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void config_system_clock(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b0ac      	sub	sp, #176	; 0xb0
 80007e8:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007ee:	2244      	movs	r2, #68	; 0x44
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f005 fb84 	bl	8005f00 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
	  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2254      	movs	r2, #84	; 0x54
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f005 fb76 	bl	8005f00 <memset>

	  /** Configure LSE Drive Capability
	  */
	  HAL_PWR_EnableBkUpAccess();
 8000814:	f002 fa82 	bl	8002d1c <HAL_PWR_EnableBkUpAccess>
	  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000818:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <config_system_clock+0x124>)
 800081a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800081e:	4a3a      	ldr	r2, [pc, #232]	; (8000908 <config_system_clock+0x124>)
 8000820:	f023 0318 	bic.w	r3, r3, #24
 8000824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000828:	2314      	movs	r3, #20
 800082a:	66fb      	str	r3, [r7, #108]	; 0x6c
	  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800082c:	2301      	movs	r3, #1
 800082e:	677b      	str	r3, [r7, #116]	; 0x74
	  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800083c:	2360      	movs	r3, #96	; 0x60
 800083e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000842:	2302      	movs	r3, #2
 8000844:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000848:	2301      	movs	r3, #1
 800084a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  RCC_OscInitStruct.PLL.PLLM = 1;
 800084e:	2301      	movs	r3, #1
 8000850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  RCC_OscInitStruct.PLL.PLLN = 16;
 8000854:	2310      	movs	r3, #16
 8000856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800085a:	2307      	movs	r3, #7
 800085c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000860:	2302      	movs	r3, #2
 8000862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000866:	2302      	movs	r3, #2
 8000868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000870:	4618      	mov	r0, r3
 8000872:	f002 fac7 	bl	8002e04 <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <config_system_clock+0x9c>
	  {
	    Error_Handler();
 800087c:	f000 fb2c 	bl	8000ed8 <Error_Handler>
	  }
	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000880:	230f      	movs	r3, #15
 8000882:	65bb      	str	r3, [r7, #88]	; 0x58
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000884:	2303      	movs	r3, #3
 8000886:	65fb      	str	r3, [r7, #92]	; 0x5c
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	663b      	str	r3, [r7, #96]	; 0x60
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	667b      	str	r3, [r7, #100]	; 0x64
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	66bb      	str	r3, [r7, #104]	; 0x68

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000894:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000898:	2101      	movs	r1, #1
 800089a:	4618      	mov	r0, r3
 800089c:	f002 fed2 	bl	8003644 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <config_system_clock+0xc6>
	  {
	    Error_Handler();
 80008a6:	f000 fb17 	bl	8000ed8 <Error_Handler>
	  }
	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80008aa:	f244 0302 	movw	r3, #16386	; 0x4002
 80008ae:	607b      	str	r3, [r7, #4]
	  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
	  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008ba:	2301      	movs	r3, #1
 80008bc:	60bb      	str	r3, [r7, #8]
	  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
	  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80008c2:	2310      	movs	r3, #16
 80008c4:	613b      	str	r3, [r7, #16]
	  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008c6:	2307      	movs	r3, #7
 80008c8:	617b      	str	r3, [r7, #20]
	  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
	  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61fb      	str	r3, [r7, #28]
	  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008d6:	623b      	str	r3, [r7, #32]
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 f8b8 	bl	8003a50 <HAL_RCCEx_PeriphCLKConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <config_system_clock+0x106>
	  {
	    Error_Handler();
 80008e6:	f000 faf7 	bl	8000ed8 <Error_Handler>
	  }
	  /** Configure the main internal regulator output voltage
	  */
	  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ee:	f002 fa33 	bl	8002d58 <HAL_PWREx_ControlVoltageScaling>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <config_system_clock+0x118>
	  {
	    Error_Handler();
 80008f8:	f000 faee 	bl	8000ed8 <Error_Handler>
	  }
	  /** Enable MSI Auto calibration
	  */
	  HAL_RCCEx_EnableMSIPLLMode();
 80008fc:	f003 fa9c 	bl	8003e38 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000900:	bf00      	nop
 8000902:	37b0      	adds	r7, #176	; 0xb0
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000

0800090c <init_adc1>:
/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void init_adc1(void){
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_ChannelConfTypeDef sConfig = {0};
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
 8000920:	615a      	str	r2, [r3, #20]
	  /* USER CODE BEGIN ADC1_Init 1 */

	  /* USER CODE END ADC1_Init 1 */
	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8000922:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <init_adc1+0xbc>)
 8000924:	4a29      	ldr	r2, [pc, #164]	; (80009cc <init_adc1+0xc0>)
 8000926:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000928:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <init_adc1+0xbc>)
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <init_adc1+0xbc>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <init_adc1+0xbc>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800093a:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <init_adc1+0xbc>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000940:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <init_adc1+0xbc>)
 8000942:	2204      	movs	r2, #4
 8000944:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <init_adc1+0xbc>)
 8000948:	2200      	movs	r2, #0
 800094a:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 800094c:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <init_adc1+0xbc>)
 800094e:	2200      	movs	r2, #0
 8000950:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.NbrOfConversion = 1;
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <init_adc1+0xbc>)
 8000954:	2201      	movs	r2, #1
 8000956:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <init_adc1+0xbc>)
 800095a:	2200      	movs	r2, #0
 800095c:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <init_adc1+0xbc>)
 8000962:	2200      	movs	r2, #0
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <init_adc1+0xbc>)
 8000968:	2200      	movs	r2, #0
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <init_adc1+0xbc>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <init_adc1+0xbc>)
 8000976:	2200      	movs	r2, #0
 8000978:	635a      	str	r2, [r3, #52]	; 0x34
	  hadc1.Init.OversamplingMode = DISABLE;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <init_adc1+0xbc>)
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000982:	4811      	ldr	r0, [pc, #68]	; (80009c8 <init_adc1+0xbc>)
 8000984:	f000 ff5e 	bl	8001844 <HAL_ADC_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <init_adc1+0x86>
	  {
	    Error_Handler();
 800098e:	f000 faa3 	bl	8000ed8 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_5;
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <init_adc1+0xc4>)
 8000994:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000996:	2306      	movs	r3, #6
 8000998:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800099e:	237f      	movs	r3, #127	; 0x7f
 80009a0:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009a2:	2304      	movs	r3, #4
 80009a4:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <init_adc1+0xbc>)
 80009b0:	f001 f9c2 	bl	8001d38 <HAL_ADC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <init_adc1+0xb2>
	  {
	    Error_Handler();
 80009ba:	f000 fa8d 	bl	8000ed8 <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000098 	.word	0x20000098
 80009cc:	50040000 	.word	0x50040000
 80009d0:	14f00020 	.word	0x14f00020

080009d4 <init_tim1>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void init_tim1(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09a      	sub	sp, #104	; 0x68
 80009d8:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN TIM1_Init 0 */

	  /* USER CODE END TIM1_Init 0 */

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
 8000a04:	615a      	str	r2, [r3, #20]
 8000a06:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	222c      	movs	r2, #44	; 0x2c
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f005 fa76 	bl	8005f00 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 8000a14:	4b43      	ldr	r3, [pc, #268]	; (8000b24 <init_tim1+0x150>)
 8000a16:	4a44      	ldr	r2, [pc, #272]	; (8000b28 <init_tim1+0x154>)
 8000a18:	601a      	str	r2, [r3, #0]
	  htim1.Init.Prescaler = 999;
 8000a1a:	4b42      	ldr	r3, [pc, #264]	; (8000b24 <init_tim1+0x150>)
 8000a1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a20:	605a      	str	r2, [r3, #4]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b40      	ldr	r3, [pc, #256]	; (8000b24 <init_tim1+0x150>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
	  htim1.Init.Period = 199;
 8000a28:	4b3e      	ldr	r3, [pc, #248]	; (8000b24 <init_tim1+0x150>)
 8000a2a:	22c7      	movs	r2, #199	; 0xc7
 8000a2c:	60da      	str	r2, [r3, #12]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2e:	4b3d      	ldr	r3, [pc, #244]	; (8000b24 <init_tim1+0x150>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
	  htim1.Init.RepetitionCounter = 0;
 8000a34:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <init_tim1+0x150>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	615a      	str	r2, [r3, #20]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a3a:	4b3a      	ldr	r3, [pc, #232]	; (8000b24 <init_tim1+0x150>)
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a40:	4838      	ldr	r0, [pc, #224]	; (8000b24 <init_tim1+0x150>)
 8000a42:	f003 fafb 	bl	800403c <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <init_tim1+0x7c>
	  {
	    Error_Handler();
 8000a4c:	f000 fa44 	bl	8000ed8 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a54:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4831      	ldr	r0, [pc, #196]	; (8000b24 <init_tim1+0x150>)
 8000a5e:	f003 fe59 	bl	8004714 <HAL_TIM_ConfigClockSource>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <init_tim1+0x98>
	  {
	    Error_Handler();
 8000a68:	f000 fa36 	bl	8000ed8 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a6c:	482d      	ldr	r0, [pc, #180]	; (8000b24 <init_tim1+0x150>)
 8000a6e:	f003 fbc0 	bl	80041f2 <HAL_TIM_PWM_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <init_tim1+0xa8>
	  {
	    Error_Handler();
 8000a78:	f000 fa2e 	bl	8000ed8 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	653b      	str	r3, [r7, #80]	; 0x50
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	657b      	str	r3, [r7, #84]	; 0x54
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4825      	ldr	r0, [pc, #148]	; (8000b24 <init_tim1+0x150>)
 8000a90:	f004 fba6 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <init_tim1+0xca>
	  {
	    Error_Handler();
 8000a9a:	f000 fa1d 	bl	8000ed8 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9e:	2360      	movs	r3, #96	; 0x60
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
	  sConfigOC.Pulse = 100;
 8000aa2:	2364      	movs	r3, #100	; 0x64
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	63bb      	str	r3, [r7, #56]	; 0x38
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	63fb      	str	r3, [r7, #60]	; 0x3c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	64bb      	str	r3, [r7, #72]	; 0x48
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000abe:	2208      	movs	r2, #8
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4818      	ldr	r0, [pc, #96]	; (8000b24 <init_tim1+0x150>)
 8000ac4:	f003 fd16 	bl	80044f4 <HAL_TIM_PWM_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <init_tim1+0xfe>
	  {
	    Error_Handler();
 8000ace:	f000 fa03 	bl	8000ed8 <Error_Handler>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aea:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000af4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.Break2Filter = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4619      	mov	r1, r3
 8000b06:	4807      	ldr	r0, [pc, #28]	; (8000b24 <init_tim1+0x150>)
 8000b08:	f004 fbd0 	bl	80052ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <init_tim1+0x142>
	  {
	    Error_Handler();
 8000b12:	f000 f9e1 	bl	8000ed8 <Error_Handler>
	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 8000b16:	4803      	ldr	r0, [pc, #12]	; (8000b24 <init_tim1+0x150>)
 8000b18:	f000 fae4 	bl	80010e4 <HAL_TIM_MspPostInit>
}
 8000b1c:	bf00      	nop
 8000b1e:	3768      	adds	r7, #104	; 0x68
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200000fc 	.word	0x200000fc
 8000b28:	40012c00 	.word	0x40012c00

08000b2c <set_current_mode>:

void set_current_mode(uint8_t val){
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	current_mode = val;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <set_current_mode+0x1c>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	7013      	strb	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	20000095 	.word	0x20000095

08000b4c <get_current_mode>:

uint8_t get_current_mode(){
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
	return current_mode;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <get_current_mode+0x14>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000095 	.word	0x20000095

08000b64 <set_previous_mode>:

void set_previous_mode(uint8_t val){
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	previous_mode = val;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <set_previous_mode+0x1c>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	7013      	strb	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	20000096 	.word	0x20000096

08000b84 <init_tim2>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void init_tim2(uint32_t prescaler, uint32_t cnt_mode, uint32_t period, uint32_t clk_div, uint32_t auto_re_pre)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	; 0x30
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]

	  /* USER CODE BEGIN TIM2_Init 0 */

	  /* USER CODE END TIM2_Init 0 */

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0320 	add.w	r3, r7, #32
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <init_tim2+0xa4>)
 8000bae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb2:	601a      	str	r2, [r3, #0]
	  htim2.Init.Prescaler = 999;
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <init_tim2+0xa4>)
 8000bb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bba:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <init_tim2+0xa4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
	  htim2.Init.Period = 31999;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <init_tim2+0xa4>)
 8000bc4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000bc8:	60da      	str	r2, [r3, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <init_tim2+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <init_tim2+0xa4>)
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bd6:	4814      	ldr	r0, [pc, #80]	; (8000c28 <init_tim2+0xa4>)
 8000bd8:	f003 fa30 	bl	800403c <HAL_TIM_Base_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <init_tim2+0x62>
	  {
	    Error_Handler();
 8000be2:	f000 f979 	bl	8000ed8 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bea:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bec:	f107 0320 	add.w	r3, r7, #32
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <init_tim2+0xa4>)
 8000bf4:	f003 fd8e 	bl	8004714 <HAL_TIM_ConfigClockSource>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <init_tim2+0x7e>
	  {
	    Error_Handler();
 8000bfe:	f000 f96b 	bl	8000ed8 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <init_tim2+0xa4>)
 8000c12:	f004 fae5 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <init_tim2+0x9c>
	  {
	    Error_Handler();
 8000c1c:	f000 f95c 	bl	8000ed8 <Error_Handler>
	  }
	  /* USER CODE BEGIN TIM2_Init 2 */

	  /* USER CODE END TIM2_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3730      	adds	r7, #48	; 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000148 	.word	0x20000148

08000c2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000c2c:	b5b0      	push	{r4, r5, r7, lr}
 8000c2e:	b09a      	sub	sp, #104	; 0x68
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2){
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c3c:	f040 8091 	bne.w	8000d62 <HAL_TIM_PeriodElapsedCallback+0x136>
		if(current_mode == 1){
 8000c40:	4b4a      	ldr	r3, [pc, #296]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d112      	bne.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x42>
			print_message("Please enter speed in %.\r\n");
 8000c48:	4849      	ldr	r0, [pc, #292]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000c4a:	f7ff fdb1 	bl	80007b0 <print_message>
			print_message("The format is as follows:\r\n");
 8000c4e:	4849      	ldr	r0, [pc, #292]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000c50:	f7ff fdae 	bl	80007b0 <print_message>
			print_message("		005		-		5%\r\n");
 8000c54:	4848      	ldr	r0, [pc, #288]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c56:	f7ff fdab 	bl	80007b0 <print_message>
			print_message("		010		-		10%\r\n");
 8000c5a:	4848      	ldr	r0, [pc, #288]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000c5c:	f7ff fda8 	bl	80007b0 <print_message>
			print_message("		100		-		100%\r\n");
 8000c60:	4847      	ldr	r0, [pc, #284]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000c62:	f7ff fda5 	bl	80007b0 <print_message>
			print_message("Enter: \r\n\r\n");
 8000c66:	4847      	ldr	r0, [pc, #284]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000c68:	f7ff fda2 	bl	80007b0 <print_message>
		}
		//else if(current_mode == 0){
			//tim2_base_stop_interrupt();
		//}
	}
}
 8000c6c:	e079      	b.n	8000d62 <HAL_TIM_PeriodElapsedCallback+0x136>
		else if(current_mode == 2){
 8000c6e:	4b3f      	ldr	r3, [pc, #252]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d175      	bne.n	8000d62 <HAL_TIM_PeriodElapsedCallback+0x136>
			uint8_t max_percent = 100;
 8000c76:	2364      	movs	r3, #100	; 0x64
 8000c78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			uint8_t base_ten = 10;
 8000c7c:	230a      	movs	r3, #10
 8000c7e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			char fan_speed_as_percent_str[3*sizeof(char) + 1] = "100";
 8000c82:	4b41      	ldr	r3, [pc, #260]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000c84:	64fb      	str	r3, [r7, #76]	; 0x4c
			float resolution_adc = 4096;
 8000c86:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8000c8a:	663b      	str	r3, [r7, #96]	; 0x60
			float pulse_max = 200.0f;
 8000c8c:	4b3f      	ldr	r3, [pc, #252]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
			char str1[] = "Potentiometer set to ";
 8000c90:	4b3f      	ldr	r3, [pc, #252]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000c92:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000c96:	461d      	mov	r5, r3
 8000c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ca0:	6020      	str	r0, [r4, #0]
 8000ca2:	3404      	adds	r4, #4
 8000ca4:	8021      	strh	r1, [r4, #0]
			char str2[] = "% power. (Continue? Enter a mode: )\r\n";
 8000ca6:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000ca8:	f107 040c 	add.w	r4, r7, #12
 8000cac:	461d      	mov	r5, r3
 8000cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cba:	6020      	str	r0, [r4, #0]
 8000cbc:	3404      	adds	r4, #4
 8000cbe:	8021      	strh	r1, [r4, #0]
			HAL_ADC_Start(&hadc1);
 8000cc0:	4835      	ldr	r0, [pc, #212]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000cc2:	f000 ff07 	bl	8001ad4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 8000cc6:	2164      	movs	r1, #100	; 0x64
 8000cc8:	4833      	ldr	r0, [pc, #204]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000cca:	f000 ff99 	bl	8001c00 <HAL_ADC_PollForConversion>
			adc_reading = HAL_ADC_GetValue(&hadc1);
 8000cce:	4832      	ldr	r0, [pc, #200]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000cd0:	f001 f825 	bl	8001d1e <HAL_ADC_GetValue>
 8000cd4:	ee07 0a90 	vmov	s15, r0
 8000cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cdc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			HAL_ADC_Stop(&hadc1);
 8000ce0:	482d      	ldr	r0, [pc, #180]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000ce2:	f000 ff5a 	bl	8001b9a <HAL_ADC_Stop>
			fan_speed_as_pulse = (adc_reading * pulse_max)/resolution_adc;
 8000ce6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000cea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000cee:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000cf2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cfe:	ee17 3a90 	vmov	r3, s15
 8000d02:	657b      	str	r3, [r7, #84]	; 0x54
			fan_speed_as_percent = (adc_reading * max_percent) / resolution_adc;
 8000d04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d08:	ee07 3a90 	vmov	s15, r3
 8000d0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d10:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8000d14:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d18:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d24:	edc7 7a00 	vstr	s15, [r7]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			print_message(str1);
 8000d2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fd3c 	bl	80007b0 <print_message>
			print_message(itoa(fan_speed_as_percent, fan_speed_as_percent_str, base_ten));
 8000d38:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000d3c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000d40:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000d44:	4618      	mov	r0, r3
 8000d46:	f005 f8d9 	bl	8005efc <itoa>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fd2f 	bl	80007b0 <print_message>
			print_message(str2);
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fd2a 	bl	80007b0 <print_message>
			adjust_tim1_pulse_width(fan_speed_as_pulse);
 8000d5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000d5e:	f7ff fbf9 	bl	8000554 <adjust_tim1_pulse_width>
}
 8000d62:	bf00      	nop
 8000d64:	3768      	adds	r7, #104	; 0x68
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000095 	.word	0x20000095
 8000d70:	08006224 	.word	0x08006224
 8000d74:	08006240 	.word	0x08006240
 8000d78:	0800625c 	.word	0x0800625c
 8000d7c:	0800626c 	.word	0x0800626c
 8000d80:	0800627c 	.word	0x0800627c
 8000d84:	08006290 	.word	0x08006290
 8000d88:	00303031 	.word	0x00303031
 8000d8c:	43480000 	.word	0x43480000
 8000d90:	0800629c 	.word	0x0800629c
 8000d94:	080062b4 	.word	0x080062b4
 8000d98:	20000098 	.word	0x20000098

08000d9c <init_usart2_uart>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void init_usart2_uart(uint32_t baudrate)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	  /* USER CODE END USART2_Init 0 */

	  /* USER CODE BEGIN USART2_Init 1 */

	  /* USER CODE END USART2_Init 1 */
	  huart2.Instance = USART2;
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <init_usart2_uart+0x5c>)
 8000da6:	4a15      	ldr	r2, [pc, #84]	; (8000dfc <init_usart2_uart+0x60>)
 8000da8:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = baudrate;
 8000daa:	4a13      	ldr	r2, [pc, #76]	; (8000df8 <init_usart2_uart+0x5c>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6053      	str	r3, [r2, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <init_usart2_uart+0x5c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <init_usart2_uart+0x5c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <init_usart2_uart+0x5c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <init_usart2_uart+0x5c>)
 8000dc4:	220c      	movs	r2, #12
 8000dc6:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <init_usart2_uart+0x5c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <init_usart2_uart+0x5c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <init_usart2_uart+0x5c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <init_usart2_uart+0x5c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <init_usart2_uart+0x5c>)
 8000de2:	f004 fb1e 	bl	8005422 <HAL_UART_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <init_usart2_uart+0x54>
	  {
	    Error_Handler();
 8000dec:	f000 f874 	bl	8000ed8 <Error_Handler>
	  }
	  /* USER CODE BEGIN USART2_Init 2 */

	  /* USER CODE END USART2_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000194 	.word	0x20000194
 8000dfc:	40004400 	.word	0x40004400

08000e00 <init_gpio>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void init_gpio(void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <init_gpio+0x80>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <init_gpio+0x80>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <init_gpio+0x80>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <init_gpio+0x80>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <init_gpio+0x80>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <init_gpio+0x80>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <init_gpio+0x80>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <init_gpio+0x80>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <init_gpio+0x80>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2108      	movs	r1, #8
 8000e62:	4808      	ldr	r0, [pc, #32]	; (8000e84 <init_gpio+0x84>)
 8000e64:	f001 ff42 	bl	8002cec <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : LD3_Pin */
	  GPIO_InitStruct.Pin = LD3_Pin;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]

}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48000400 	.word	0x48000400

08000e88 <tim1_complement_pwm_start>:

void tim1_complement_pwm_start(){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000e8c:	2108      	movs	r1, #8
 8000e8e:	4802      	ldr	r0, [pc, #8]	; (8000e98 <tim1_complement_pwm_start+0x10>)
 8000e90:	f004 f8aa 	bl	8004fe8 <HAL_TIMEx_PWMN_Start>
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200000fc 	.word	0x200000fc

08000e9c <tim1_complement_pwm_stop>:

void tim1_complement_pwm_stop(){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8000ea0:	2108      	movs	r1, #8
 8000ea2:	4802      	ldr	r0, [pc, #8]	; (8000eac <tim1_complement_pwm_stop+0x10>)
 8000ea4:	f004 f93e 	bl	8005124 <HAL_TIMEx_PWMN_Stop>
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200000fc 	.word	0x200000fc

08000eb0 <tim2_base_start_interrupt>:

void tim2_base_start_interrupt(){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <tim2_base_start_interrupt+0x10>)
 8000eb6:	f003 f919 	bl	80040ec <HAL_TIM_Base_Start_IT>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000148 	.word	0x20000148

08000ec4 <tim2_base_stop_interrupt>:
void tim2_base_stop_interrupt(){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <tim2_base_stop_interrupt+0x10>)
 8000eca:	f003 f963 	bl	8004194 <HAL_TIM_Base_Stop_IT>
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000148 	.word	0x20000148

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <Error_Handler+0x8>

08000ee2 <init_system>:
 */


#include "fan_app.h"

void init_system(){
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
	init_hal();
 8000ee6:	f7ff fc77 	bl	80007d8 <init_hal>
	config_system_clock();
 8000eea:	f7ff fc7b 	bl	80007e4 <config_system_clock>
	init_gpio();
 8000eee:	f7ff ff87 	bl	8000e00 <init_gpio>
	init_usart2_uart(115200);
 8000ef2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000ef6:	f7ff ff51 	bl	8000d9c <init_usart2_uart>
	init_tim1();
 8000efa:	f7ff fd6b 	bl	80009d4 <init_tim1>
	init_adc1();
 8000efe:	f7ff fd05 	bl	800090c <init_adc1>
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <print_header>:



void print_header(){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	print_message("******************************************************************************************************\r\n");
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <print_header+0x38>)
 8000f0e:	f7ff fc4f 	bl	80007b0 <print_message>
	print_message("*********************************** Final Exam - <Mark> <Bilginer> ***********************************\r\n");
 8000f12:	480c      	ldr	r0, [pc, #48]	; (8000f44 <print_header+0x3c>)
 8000f14:	f7ff fc4c 	bl	80007b0 <print_message>
	print_message("********** Enter 1 for \“fan control via terminal\” or 2 for \“fan control via potentiometer\” ***********\r\n");
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <print_header+0x40>)
 8000f1a:	f7ff fc49 	bl	80007b0 <print_message>
	print_message("***************************************** Enter 0 to \"exit\" ******************************************\r\n");
 8000f1e:	480b      	ldr	r0, [pc, #44]	; (8000f4c <print_header+0x44>)
 8000f20:	f7ff fc46 	bl	80007b0 <print_message>
	print_message("******** During run, change the mode by typing 1 or 2 or 0. Turns on the corresponding mode **********\r\n");
 8000f24:	480a      	ldr	r0, [pc, #40]	; (8000f50 <print_header+0x48>)
 8000f26:	f7ff fc43 	bl	80007b0 <print_message>
	print_message("******************************************************************************************************\r\n");
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <print_header+0x38>)
 8000f2c:	f7ff fc40 	bl	80007b0 <print_message>
	print_message("\r\n\r\n");
 8000f30:	4808      	ldr	r0, [pc, #32]	; (8000f54 <print_header+0x4c>)
 8000f32:	f7ff fc3d 	bl	80007b0 <print_message>
	print_message("Input:\r\n");
 8000f36:	4808      	ldr	r0, [pc, #32]	; (8000f58 <print_header+0x50>)
 8000f38:	f7ff fc3a 	bl	80007b0 <print_message>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	080062dc 	.word	0x080062dc
 8000f44:	08006348 	.word	0x08006348
 8000f48:	080063b4 	.word	0x080063b4
 8000f4c:	08006428 	.word	0x08006428
 8000f50:	08006494 	.word	0x08006494
 8000f54:	08006500 	.word	0x08006500
 8000f58:	08006508 	.word	0x08006508

08000f5c <application>:

void application(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

	if(!(get_is_exit() == 1)){
 8000f60:	f7ff fac8 	bl	80004f4 <get_is_exit>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d00e      	beq.n	8000f88 <application+0x2c>

		receive_input_fan_control();
 8000f6a:	f7ff fb9d 	bl	80006a8 <receive_input_fan_control>

		if(get_current_mode() == 1){
 8000f6e:	f7ff fded 	bl	8000b4c <get_current_mode>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d101      	bne.n	8000f7c <application+0x20>
			receive_input_fan_speed();
 8000f78:	f7ff fb3a 	bl	80005f0 <receive_input_fan_speed>
		}

		set_previous_mode(get_current_mode());
 8000f7c:	f7ff fde6 	bl	8000b4c <get_current_mode>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fdee 	bl	8000b64 <set_previous_mode>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  init_system();
 8000f90:	f7ff ffa7 	bl	8000ee2 <init_system>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  print_header();
 8000f94:	f7ff ffb8 	bl	8000f08 <print_header>
  while (1){
	  application();
 8000f98:	f7ff ffe0 	bl	8000f5c <application>
 8000f9c:	e7fc      	b.n	8000f98 <main+0xc>
	...

08000fa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_MspInit+0x44>)
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <HAL_MspInit+0x44>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <HAL_MspInit+0x44>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <HAL_MspInit+0x44>)
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc2:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_MspInit+0x44>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_MspInit+0x44>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a15      	ldr	r2, [pc, #84]	; (800105c <HAL_ADC_MspInit+0x74>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d124      	bne.n	8001054 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_ADC_MspInit+0x78>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a14      	ldr	r2, [pc, #80]	; (8001060 <HAL_ADC_MspInit+0x78>)
 8001010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_ADC_MspInit+0x78>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_ADC_MspInit+0x78>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_ADC_MspInit+0x78>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_ADC_MspInit+0x78>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800103a:	2301      	movs	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800103e:	230b      	movs	r3, #11
 8001040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001050:	f001 fce2 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	50040000 	.word	0x50040000
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <HAL_TIM_Base_MspInit+0x78>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d114      	bne.n	80010a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HAL_TIM_Base_MspInit+0x7c>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <HAL_TIM_Base_MspInit+0x7c>)
 800107c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001080:	6613      	str	r3, [r2, #96]	; 0x60
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_TIM_Base_MspInit+0x7c>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2019      	movs	r0, #25
 8001094:	f001 fc89 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001098:	2019      	movs	r0, #25
 800109a:	f001 fca2 	bl	80029e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800109e:	e018      	b.n	80010d2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a8:	d113      	bne.n	80010d2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_TIM_Base_MspInit+0x7c>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <HAL_TIM_Base_MspInit+0x7c>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6593      	str	r3, [r2, #88]	; 0x58
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_TIM_Base_MspInit+0x7c>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	201c      	movs	r0, #28
 80010c8:	f001 fc6f 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010cc:	201c      	movs	r0, #28
 80010ce:	f001 fc88 	bl	80029e2 <HAL_NVIC_EnableIRQ>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40012c00 	.word	0x40012c00
 80010e0:	40021000 	.word	0x40021000

080010e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a11      	ldr	r2, [pc, #68]	; (8001148 <HAL_TIM_MspPostInit+0x64>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d11b      	bne.n	800113e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_TIM_MspPostInit+0x68>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <HAL_TIM_MspPostInit+0x68>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_TIM_MspPostInit+0x68>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB1     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800111e:	2302      	movs	r3, #2
 8001120:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800112e:	2301      	movs	r3, #1
 8001130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <HAL_TIM_MspPostInit+0x6c>)
 800113a:	f001 fc6d 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40012c00 	.word	0x40012c00
 800114c:	40021000 	.word	0x40021000
 8001150:	48000400 	.word	0x48000400

08001154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a20      	ldr	r2, [pc, #128]	; (80011f4 <HAL_UART_MspInit+0xa0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d13a      	bne.n	80011ec <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HAL_UART_MspInit+0xa4>)
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <HAL_UART_MspInit+0xa4>)
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	6593      	str	r3, [r2, #88]	; 0x58
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_UART_MspInit+0xa4>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <HAL_UART_MspInit+0xa4>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <HAL_UART_MspInit+0xa4>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <HAL_UART_MspInit+0xa4>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80011a6:	2304      	movs	r3, #4
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b6:	2307      	movs	r3, #7
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f001 fc28 	bl	8002a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80011c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80011da:	2303      	movs	r3, #3
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f001 fc16 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40004400 	.word	0x40004400
 80011f8:	40021000 	.word	0x40021000

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <NMI_Handler+0x4>

08001202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <MemManage_Handler+0x4>

0800120e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <UsageFault_Handler+0x4>

0800121a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001248:	f000 f8c6 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001256:	f003 f82d 	bl	80042b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200000fc 	.word	0x200000fc

08001264 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <TIM2_IRQHandler+0x10>)
 800126a:	f003 f823 	bl	80042b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000148 	.word	0x20000148

08001278 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <SystemInit+0x5c>)
 800127e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001282:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <SystemInit+0x5c>)
 8001284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <SystemInit+0x60>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a11      	ldr	r2, [pc, #68]	; (80012d8 <SystemInit+0x60>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <SystemInit+0x60>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <SystemInit+0x60>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <SystemInit+0x60>)
 80012a4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012a8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <SystemInit+0x60>)
 80012b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <SystemInit+0x60>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <SystemInit+0x60>)
 80012bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SystemInit+0x60>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00
 80012d8:	40021000 	.word	0x40021000

080012dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001314 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012e0:	f7ff ffca 	bl	8001278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012e6:	e003      	b.n	80012f0 <LoopCopyDataInit>

080012e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012ee:	3104      	adds	r1, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012f0:	480a      	ldr	r0, [pc, #40]	; (800131c <LoopForever+0xa>)
	ldr	r3, =_edata
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012f8:	d3f6      	bcc.n	80012e8 <CopyDataInit>
	ldr	r2, =_sbss
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012fc:	e002      	b.n	8001304 <LoopFillZerobss>

080012fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001300:	f842 3b04 	str.w	r3, [r2], #4

08001304 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <LoopForever+0x16>)
	cmp	r2, r3
 8001306:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001308:	d3f9      	bcc.n	80012fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800130a:	f004 fdbb 	bl	8005e84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800130e:	f7ff fe3d 	bl	8000f8c <main>

08001312 <LoopForever>:

LoopForever:
    b LoopForever
 8001312:	e7fe      	b.n	8001312 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001314:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001318:	08006694 	.word	0x08006694
	ldr	r0, =_sdata
 800131c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001320:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001324:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001328:	2000021c 	.word	0x2000021c

0800132c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC1_IRQHandler>

0800132e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001338:	2003      	movs	r0, #3
 800133a:	f001 fb2b 	bl	8002994 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800133e:	2000      	movs	r0, #0
 8001340:	f000 f80e 	bl	8001360 <HAL_InitTick>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	71fb      	strb	r3, [r7, #7]
 800134e:	e001      	b.n	8001354 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001350:	f7ff fe26 	bl	8000fa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001354:	79fb      	ldrb	r3, [r7, #7]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_InitTick+0x6c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d023      	beq.n	80013bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_InitTick+0x70>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_InitTick+0x6c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	fbb3 f3f1 	udiv	r3, r3, r1
 8001386:	fbb2 f3f3 	udiv	r3, r2, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fb37 	bl	80029fe <HAL_SYSTICK_Config>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10f      	bne.n	80013b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d809      	bhi.n	80013b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a4:	f001 fb01 	bl	80029aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a8:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_InitTick+0x74>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e007      	b.n	80013c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e004      	b.n	80013c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
 80013ba:	e001      	b.n	80013c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000000c 	.word	0x2000000c
 80013d0:	20000004 	.word	0x20000004
 80013d4:	20000008 	.word	0x20000008

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	2000000c 	.word	0x2000000c
 80013fc:	20000218 	.word	0x20000218

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000218 	.word	0x20000218

08001418 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	609a      	str	r2, [r3, #8]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	609a      	str	r2, [r3, #8]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3360      	adds	r3, #96	; 0x60
 8001492:	461a      	mov	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <LL_ADC_SetOffset+0x44>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	4313      	orrs	r3, r2
 80014b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014b8:	bf00      	nop
 80014ba:	371c      	adds	r7, #28
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	03fff000 	.word	0x03fff000

080014c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3360      	adds	r3, #96	; 0x60
 80014d6:	461a      	mov	r2, r3
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3360      	adds	r3, #96	; 0x60
 8001504:	461a      	mov	r2, r3
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	431a      	orrs	r2, r3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800151e:	bf00      	nop
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3330      	adds	r3, #48	; 0x30
 8001560:	461a      	mov	r2, r3
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	4413      	add	r3, r2
 800156e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f003 031f 	and.w	r3, r3, #31
 800157a:	211f      	movs	r1, #31
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	401a      	ands	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	0e9b      	lsrs	r3, r3, #26
 8001588:	f003 011f 	and.w	r1, r3, #31
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	431a      	orrs	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800159c:	bf00      	nop
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b087      	sub	sp, #28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3314      	adds	r3, #20
 80015b8:	461a      	mov	r2, r3
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	0e5b      	lsrs	r3, r3, #25
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	4413      	add	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	0d1b      	lsrs	r3, r3, #20
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	2107      	movs	r1, #7
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	401a      	ands	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	0d1b      	lsrs	r3, r3, #20
 80015e2:	f003 031f 	and.w	r3, r3, #31
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	431a      	orrs	r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015f2:	bf00      	nop
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001618:	43db      	mvns	r3, r3
 800161a:	401a      	ands	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0318 	and.w	r3, r3, #24
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001624:	40d9      	lsrs	r1, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	400b      	ands	r3, r1
 800162a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800162e:	431a      	orrs	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	0007ffff 	.word	0x0007ffff

08001648 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001658:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6093      	str	r3, [r2, #8]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800167c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001680:	d101      	bne.n	8001686 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80016a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016d0:	d101      	bne.n	80016d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016f8:	f043 0201 	orr.w	r2, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800171c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001720:	f043 0202 	orr.w	r2, r3, #2
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <LL_ADC_IsEnabled+0x18>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <LL_ADC_IsEnabled+0x1a>
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b02      	cmp	r3, #2
 800176c:	d101      	bne.n	8001772 <LL_ADC_IsDisableOngoing+0x18>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <LL_ADC_IsDisableOngoing+0x1a>
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001790:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001794:	f043 0204 	orr.w	r2, r3, #4
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017bc:	f043 0210 	orr.w	r2, r3, #16
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d101      	bne.n	80017e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001806:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800180a:	f043 0220 	orr.w	r2, r3, #32
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b08      	cmp	r3, #8
 8001830:	d101      	bne.n	8001836 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e12c      	b.n	8001ab8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fbbb 	bl	8000fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fef1 	bl	800166c <LL_ADC_IsDeepPowerDownEnabled>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fed7 	bl	8001648 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff0c 	bl	80016bc <LL_ADC_IsInternalRegulatorEnabled>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d115      	bne.n	80018d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fef0 	bl	8001694 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018b4:	4b82      	ldr	r3, [pc, #520]	; (8001ac0 <HAL_ADC_Init+0x27c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	4a82      	ldr	r2, [pc, #520]	; (8001ac4 <HAL_ADC_Init+0x280>)
 80018bc:	fba2 2303 	umull	r2, r3, r2, r3
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	3301      	adds	r3, #1
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018c8:	e002      	b.n	80018d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f9      	bne.n	80018ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff feee 	bl	80016bc <LL_ADC_IsInternalRegulatorEnabled>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10d      	bne.n	8001902 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ea:	f043 0210 	orr.w	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	f043 0201 	orr.w	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff62 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 800190c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 80c5 	bne.w	8001aa6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 80c1 	bne.w	8001aa6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001928:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800192c:	f043 0202 	orr.w	r2, r3, #2
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fefb 	bl	8001734 <LL_ADC_IsEnabled>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10b      	bne.n	800195c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001944:	4860      	ldr	r0, [pc, #384]	; (8001ac8 <HAL_ADC_Init+0x284>)
 8001946:	f7ff fef5 	bl	8001734 <LL_ADC_IsEnabled>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4619      	mov	r1, r3
 8001956:	485d      	ldr	r0, [pc, #372]	; (8001acc <HAL_ADC_Init+0x288>)
 8001958:	f7ff fd5e 	bl	8001418 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7e5b      	ldrb	r3, [r3, #25]
 8001960:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001966:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800196c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001972:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d106      	bne.n	8001998 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	3b01      	subs	r3, #1
 8001990:	045b      	lsls	r3, r3, #17
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	2b00      	cmp	r3, #0
 800199e:	d009      	beq.n	80019b4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	4b45      	ldr	r3, [pc, #276]	; (8001ad0 <HAL_ADC_Init+0x28c>)
 80019bc:	4013      	ands	r3, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	69b9      	ldr	r1, [r7, #24]
 80019c4:	430b      	orrs	r3, r1
 80019c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff feff 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 80019d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff20 	bl	800181e <LL_ADC_INJ_IsConversionOngoing>
 80019de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d13d      	bne.n	8001a62 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d13a      	bne.n	8001a62 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a08:	f023 0302 	bic.w	r3, r3, #2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	69b9      	ldr	r1, [r7, #24]
 8001a12:	430b      	orrs	r3, r1
 8001a14:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d118      	bne.n	8001a52 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a2a:	f023 0304 	bic.w	r3, r3, #4
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a36:	4311      	orrs	r1, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a3c:	4311      	orrs	r1, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a42:	430a      	orrs	r2, r1
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	611a      	str	r2, [r3, #16]
 8001a50:	e007      	b.n	8001a62 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d10c      	bne.n	8001a84 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	f023 010f 	bic.w	r1, r3, #15
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	1e5a      	subs	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	631a      	str	r2, [r3, #48]	; 0x30
 8001a82:	e007      	b.n	8001a94 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 020f 	bic.w	r2, r2, #15
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a98:	f023 0303 	bic.w	r3, r3, #3
 8001a9c:	f043 0201 	orr.w	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	655a      	str	r2, [r3, #84]	; 0x54
 8001aa4:	e007      	b.n	8001ab6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	f043 0210 	orr.w	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	053e2d63 	.word	0x053e2d63
 8001ac8:	50040000 	.word	0x50040000
 8001acc:	50040300 	.word	0x50040300
 8001ad0:	fff0c007 	.word	0xfff0c007

08001ad4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fe75 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d14f      	bne.n	8001b8c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_Start+0x26>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e04b      	b.n	8001b92 <HAL_ADC_Start+0xbe>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fdb4 	bl	8002670 <ADC_Enable>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d137      	bne.n	8001b82 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b32:	d106      	bne.n	8001b42 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	f023 0206 	bic.w	r2, r3, #6
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	659a      	str	r2, [r3, #88]	; 0x58
 8001b40:	e002      	b.n	8001b48 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	221c      	movs	r2, #28
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d007      	beq.n	8001b76 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fe00 	bl	8001780 <LL_ADC_REG_StartConversion>
 8001b80:	e006      	b.n	8001b90 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001b8a:	e001      	b.n	8001b90 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_Stop+0x16>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e023      	b.n	8001bf8 <HAL_ADC_Stop+0x5e>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001bb8:	2103      	movs	r1, #3
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 fc9c 	bl	80024f8 <ADC_ConversionStop>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d111      	bne.n	8001bee <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fdb2 	bl	8002734 <ADC_Disable>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	f043 0201 	orr.w	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d102      	bne.n	8001c18 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001c12:	2308      	movs	r3, #8
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e010      	b.n	8001c3a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2a:	f043 0220 	orr.w	r2, r3, #32
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e06f      	b.n	8001d16 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001c36:	2304      	movs	r3, #4
 8001c38:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c3a:	f7ff fbe1 	bl	8001400 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c40:	e021      	b.n	8001c86 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c48:	d01d      	beq.n	8001c86 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c4a:	f7ff fbd9 	bl	8001400 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d302      	bcc.n	8001c60 <HAL_ADC_PollForConversion+0x60>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d112      	bne.n	8001c86 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10b      	bne.n	8001c86 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	f043 0204 	orr.w	r2, r3, #4
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e047      	b.n	8001d16 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0d6      	beq.n	8001c42 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fc40 	bl	800152a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01c      	beq.n	8001cea <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7e5b      	ldrb	r3, [r3, #25]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d118      	bne.n	8001cea <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d111      	bne.n	8001cea <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d105      	bne.n	8001cea <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d104      	bne.n	8001d02 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e008      	b.n	8001d14 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d103      	bne.n	8001d14 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	220c      	movs	r2, #12
 8001d12:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b0b6      	sub	sp, #216	; 0xd8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x22>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e3b9      	b.n	80024ce <HAL_ADC_ConfigChannel+0x796>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fd32 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 839e 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b05      	cmp	r3, #5
 8001d7a:	d824      	bhi.n	8001dc6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	3b02      	subs	r3, #2
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d81b      	bhi.n	8001dbe <HAL_ADC_ConfigChannel+0x86>
 8001d86:	a201      	add	r2, pc, #4	; (adr r2, 8001d8c <HAL_ADC_ConfigChannel+0x54>)
 8001d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8c:	08001d9d 	.word	0x08001d9d
 8001d90:	08001da5 	.word	0x08001da5
 8001d94:	08001dad 	.word	0x08001dad
 8001d98:	08001db5 	.word	0x08001db5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	220c      	movs	r2, #12
 8001da0:	605a      	str	r2, [r3, #4]
          break;
 8001da2:	e011      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2212      	movs	r2, #18
 8001da8:	605a      	str	r2, [r3, #4]
          break;
 8001daa:	e00d      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	2218      	movs	r2, #24
 8001db0:	605a      	str	r2, [r3, #4]
          break;
 8001db2:	e009      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dba:	605a      	str	r2, [r3, #4]
          break;
 8001dbc:	e004      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2206      	movs	r2, #6
 8001dc2:	605a      	str	r2, [r3, #4]
          break;
 8001dc4:	e000      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001dc6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f7ff fbbb 	bl	8001550 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fcf6 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 8001de4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fd16 	bl	800181e <LL_ADC_INJ_IsConversionOngoing>
 8001df2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001df6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 81a6 	bne.w	800214c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 81a1 	bne.w	800214c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6819      	ldr	r1, [r3, #0]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	461a      	mov	r2, r3
 8001e18:	f7ff fbc6 	bl	80015a8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	695a      	ldr	r2, [r3, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	08db      	lsrs	r3, r3, #3
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d00a      	beq.n	8001e54 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6919      	ldr	r1, [r3, #16]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e4e:	f7ff fb17 	bl	8001480 <LL_ADC_SetOffset>
 8001e52:	e17b      	b.n	800214c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fb34 	bl	80014c8 <LL_ADC_GetOffsetChannel>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10a      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x148>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fb29 	bl	80014c8 <LL_ADC_GetOffsetChannel>
 8001e76:	4603      	mov	r3, r0
 8001e78:	0e9b      	lsrs	r3, r3, #26
 8001e7a:	f003 021f 	and.w	r2, r3, #31
 8001e7e:	e01e      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x186>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fb1e 	bl	80014c8 <LL_ADC_GetOffsetChannel>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ea6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001eae:	2320      	movs	r3, #32
 8001eb0:	e004      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001eb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d105      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x19e>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0e9b      	lsrs	r3, r3, #26
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	e018      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x1d0>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001ef2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001efa:	2320      	movs	r3, #32
 8001efc:	e004      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001efe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d106      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff faed 	bl	80014f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fad1 	bl	80014c8 <LL_ADC_GetOffsetChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10a      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x20e>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2101      	movs	r1, #1
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fac6 	bl	80014c8 <LL_ADC_GetOffsetChannel>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	0e9b      	lsrs	r3, r3, #26
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	e01e      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x24c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fabb 	bl	80014c8 <LL_ADC_GetOffsetChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001f74:	2320      	movs	r3, #32
 8001f76:	e004      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001f78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x264>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	0e9b      	lsrs	r3, r3, #26
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	e018      	b.n	8001fce <HAL_ADC_ConfigChannel+0x296>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001fb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	e004      	b.n	8001fce <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d106      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2101      	movs	r1, #1
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fa8a 	bl	80014f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fa6e 	bl	80014c8 <LL_ADC_GetOffsetChannel>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10a      	bne.n	800200c <HAL_ADC_ConfigChannel+0x2d4>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fa63 	bl	80014c8 <LL_ADC_GetOffsetChannel>
 8002002:	4603      	mov	r3, r0
 8002004:	0e9b      	lsrs	r3, r3, #26
 8002006:	f003 021f 	and.w	r2, r3, #31
 800200a:	e01e      	b.n	800204a <HAL_ADC_ConfigChannel+0x312>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2102      	movs	r1, #2
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fa58 	bl	80014c8 <LL_ADC_GetOffsetChannel>
 8002018:	4603      	mov	r3, r0
 800201a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800202a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800202e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002032:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800203a:	2320      	movs	r3, #32
 800203c:	e004      	b.n	8002048 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800203e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002052:	2b00      	cmp	r3, #0
 8002054:	d105      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x32a>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	0e9b      	lsrs	r3, r3, #26
 800205c:	f003 031f 	and.w	r3, r3, #31
 8002060:	e016      	b.n	8002090 <HAL_ADC_ConfigChannel+0x358>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002074:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002076:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800207a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002082:	2320      	movs	r3, #32
 8002084:	e004      	b.n	8002090 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002086:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002090:	429a      	cmp	r2, r3
 8002092:	d106      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	2102      	movs	r1, #2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fa29 	bl	80014f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2103      	movs	r1, #3
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fa0d 	bl	80014c8 <LL_ADC_GetOffsetChannel>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10a      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x396>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2103      	movs	r1, #3
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fa02 	bl	80014c8 <LL_ADC_GetOffsetChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	0e9b      	lsrs	r3, r3, #26
 80020c8:	f003 021f 	and.w	r2, r3, #31
 80020cc:	e017      	b.n	80020fe <HAL_ADC_ConfigChannel+0x3c6>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2103      	movs	r1, #3
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff f9f7 	bl	80014c8 <LL_ADC_GetOffsetChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020e0:	fa93 f3a3 	rbit	r3, r3
 80020e4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80020e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020e8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80020ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80020f0:	2320      	movs	r3, #32
 80020f2:	e003      	b.n	80020fc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80020f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002106:	2b00      	cmp	r3, #0
 8002108:	d105      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x3de>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	0e9b      	lsrs	r3, r3, #26
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	e011      	b.n	800213a <HAL_ADC_ConfigChannel+0x402>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002126:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800212e:	2320      	movs	r3, #32
 8002130:	e003      	b.n	800213a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800213a:	429a      	cmp	r2, r3
 800213c:	d106      	bne.n	800214c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	2103      	movs	r1, #3
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff f9d4 	bl	80014f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff faef 	bl	8001734 <LL_ADC_IsEnabled>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	f040 813f 	bne.w	80023dc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6819      	ldr	r1, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	461a      	mov	r2, r3
 800216c:	f7ff fa48 	bl	8001600 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a8e      	ldr	r2, [pc, #568]	; (80023b0 <HAL_ADC_ConfigChannel+0x678>)
 8002176:	4293      	cmp	r3, r2
 8002178:	f040 8130 	bne.w	80023dc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10b      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x46c>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0e9b      	lsrs	r3, r3, #26
 8002192:	3301      	adds	r3, #1
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	2b09      	cmp	r3, #9
 800219a:	bf94      	ite	ls
 800219c:	2301      	movls	r3, #1
 800219e:	2300      	movhi	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	e019      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x4a0>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80021b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021b4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80021bc:	2320      	movs	r3, #32
 80021be:	e003      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80021c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	3301      	adds	r3, #1
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	2b09      	cmp	r3, #9
 80021d0:	bf94      	ite	ls
 80021d2:	2301      	movls	r3, #1
 80021d4:	2300      	movhi	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d079      	beq.n	80022d0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d107      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x4c0>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0e9b      	lsrs	r3, r3, #26
 80021ee:	3301      	adds	r3, #1
 80021f0:	069b      	lsls	r3, r3, #26
 80021f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021f6:	e015      	b.n	8002224 <HAL_ADC_ConfigChannel+0x4ec>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002208:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800220a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002210:	2320      	movs	r3, #32
 8002212:	e003      	b.n	800221c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	3301      	adds	r3, #1
 800221e:	069b      	lsls	r3, r3, #26
 8002220:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222c:	2b00      	cmp	r3, #0
 800222e:	d109      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x50c>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	0e9b      	lsrs	r3, r3, #26
 8002236:	3301      	adds	r3, #1
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	2101      	movs	r1, #1
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	e017      	b.n	8002274 <HAL_ADC_ConfigChannel+0x53c>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002254:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800225c:	2320      	movs	r3, #32
 800225e:	e003      	b.n	8002268 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	3301      	adds	r3, #1
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	2101      	movs	r1, #1
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	ea42 0103 	orr.w	r1, r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10a      	bne.n	800229a <HAL_ADC_ConfigChannel+0x562>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	3301      	adds	r3, #1
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	051b      	lsls	r3, r3, #20
 8002298:	e018      	b.n	80022cc <HAL_ADC_ConfigChannel+0x594>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80022ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80022b2:	2320      	movs	r3, #32
 80022b4:	e003      	b.n	80022be <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80022b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022cc:	430b      	orrs	r3, r1
 80022ce:	e080      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x5b4>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0e9b      	lsrs	r3, r3, #26
 80022e2:	3301      	adds	r3, #1
 80022e4:	069b      	lsls	r3, r3, #26
 80022e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ea:	e015      	b.n	8002318 <HAL_ADC_ConfigChannel+0x5e0>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80022fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002304:	2320      	movs	r3, #32
 8002306:	e003      	b.n	8002310 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	3301      	adds	r3, #1
 8002312:	069b      	lsls	r3, r3, #26
 8002314:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x600>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0e9b      	lsrs	r3, r3, #26
 800232a:	3301      	adds	r3, #1
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	2101      	movs	r1, #1
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	e017      	b.n	8002368 <HAL_ADC_ConfigChannel+0x630>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	61fb      	str	r3, [r7, #28]
  return result;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002350:	2320      	movs	r3, #32
 8002352:	e003      	b.n	800235c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	3301      	adds	r3, #1
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	2101      	movs	r1, #1
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	ea42 0103 	orr.w	r1, r2, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10d      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x65c>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	3301      	adds	r3, #1
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	3b1e      	subs	r3, #30
 800238c:	051b      	lsls	r3, r3, #20
 800238e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002392:	e01d      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x698>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	613b      	str	r3, [r7, #16]
  return result;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d103      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80023ac:	2320      	movs	r3, #32
 80023ae:	e005      	b.n	80023bc <HAL_ADC_ConfigChannel+0x684>
 80023b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	f003 021f 	and.w	r2, r3, #31
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	3b1e      	subs	r3, #30
 80023ca:	051b      	lsls	r3, r3, #20
 80023cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d0:	430b      	orrs	r3, r1
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	6892      	ldr	r2, [r2, #8]
 80023d6:	4619      	mov	r1, r3
 80023d8:	f7ff f8e6 	bl	80015a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <HAL_ADC_ConfigChannel+0x7a0>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d06c      	beq.n	80024c2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023e8:	483c      	ldr	r0, [pc, #240]	; (80024dc <HAL_ADC_ConfigChannel+0x7a4>)
 80023ea:	f7ff f83b 	bl	8001464 <LL_ADC_GetCommonPathInternalCh>
 80023ee:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a3a      	ldr	r2, [pc, #232]	; (80024e0 <HAL_ADC_ConfigChannel+0x7a8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d127      	bne.n	800244c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d121      	bne.n	800244c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a35      	ldr	r2, [pc, #212]	; (80024e4 <HAL_ADC_ConfigChannel+0x7ac>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d157      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002416:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800241a:	4619      	mov	r1, r3
 800241c:	482f      	ldr	r0, [pc, #188]	; (80024dc <HAL_ADC_ConfigChannel+0x7a4>)
 800241e:	f7ff f80e 	bl	800143e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002422:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	4a30      	ldr	r2, [pc, #192]	; (80024ec <HAL_ADC_ConfigChannel+0x7b4>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	099b      	lsrs	r3, r3, #6
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	4613      	mov	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800243c:	e002      	b.n	8002444 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3b01      	subs	r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f9      	bne.n	800243e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800244a:	e03a      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d113      	bne.n	800247e <HAL_ADC_ConfigChannel+0x746>
 8002456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800245a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10d      	bne.n	800247e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d12a      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800246c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002474:	4619      	mov	r1, r3
 8002476:	4819      	ldr	r0, [pc, #100]	; (80024dc <HAL_ADC_ConfigChannel+0x7a4>)
 8002478:	f7fe ffe1 	bl	800143e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800247c:	e021      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d11c      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800248c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d116      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <HAL_ADC_ConfigChannel+0x7ac>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d111      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800249e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024a6:	4619      	mov	r1, r3
 80024a8:	480c      	ldr	r0, [pc, #48]	; (80024dc <HAL_ADC_ConfigChannel+0x7a4>)
 80024aa:	f7fe ffc8 	bl	800143e <LL_ADC_SetCommonPathInternalCh>
 80024ae:	e008      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	f043 0220 	orr.w	r2, r3, #32
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	37d8      	adds	r7, #216	; 0xd8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	80080000 	.word	0x80080000
 80024dc:	50040300 	.word	0x50040300
 80024e0:	c7520000 	.word	0xc7520000
 80024e4:	50040000 	.word	0x50040000
 80024e8:	20000004 	.word	0x20000004
 80024ec:	053e2d63 	.word	0x053e2d63
 80024f0:	cb840000 	.word	0xcb840000
 80024f4:	80000001 	.word	0x80000001

080024f8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff f95e 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 8002514:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f97f 	bl	800181e <LL_ADC_INJ_IsConversionOngoing>
 8002520:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d103      	bne.n	8002530 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8098 	beq.w	8002660 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d02a      	beq.n	8002594 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7e5b      	ldrb	r3, [r3, #25]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d126      	bne.n	8002594 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7e1b      	ldrb	r3, [r3, #24]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d122      	bne.n	8002594 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800254e:	2301      	movs	r3, #1
 8002550:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002552:	e014      	b.n	800257e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	4a45      	ldr	r2, [pc, #276]	; (800266c <ADC_ConversionStop+0x174>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d90d      	bls.n	8002578 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	f043 0210 	orr.w	r2, r3, #16
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	f043 0201 	orr.w	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e074      	b.n	8002662 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	3301      	adds	r3, #1
 800257c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002588:	2b40      	cmp	r3, #64	; 0x40
 800258a:	d1e3      	bne.n	8002554 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2240      	movs	r2, #64	; 0x40
 8002592:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d014      	beq.n	80025c4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff f916 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00c      	beq.n	80025c4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff f8d3 	bl	800175a <LL_ADC_IsDisableOngoing>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d104      	bne.n	80025c4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff f8f2 	bl	80017a8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d014      	beq.n	80025f4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff f925 	bl	800181e <LL_ADC_INJ_IsConversionOngoing>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00c      	beq.n	80025f4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff f8bb 	bl	800175a <LL_ADC_IsDisableOngoing>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d104      	bne.n	80025f4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff f901 	bl	80017f6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d005      	beq.n	8002606 <ADC_ConversionStop+0x10e>
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d105      	bne.n	800260c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002600:	230c      	movs	r3, #12
 8002602:	617b      	str	r3, [r7, #20]
        break;
 8002604:	e005      	b.n	8002612 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002606:	2308      	movs	r3, #8
 8002608:	617b      	str	r3, [r7, #20]
        break;
 800260a:	e002      	b.n	8002612 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800260c:	2304      	movs	r3, #4
 800260e:	617b      	str	r3, [r7, #20]
        break;
 8002610:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002612:	f7fe fef5 	bl	8001400 <HAL_GetTick>
 8002616:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002618:	e01b      	b.n	8002652 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800261a:	f7fe fef1 	bl	8001400 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b05      	cmp	r3, #5
 8002626:	d914      	bls.n	8002652 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	4013      	ands	r3, r2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00d      	beq.n	8002652 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f043 0210 	orr.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e007      	b.n	8002662 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1dc      	bne.n	800261a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3720      	adds	r7, #32
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	a33fffff 	.word	0xa33fffff

08002670 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff f859 	bl	8001734 <LL_ADC_IsEnabled>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d14d      	bne.n	8002724 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	4b28      	ldr	r3, [pc, #160]	; (8002730 <ADC_Enable+0xc0>)
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00d      	beq.n	80026b2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	f043 0210 	orr.w	r2, r3, #16
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	f043 0201 	orr.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e039      	b.n	8002726 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f814 	bl	80016e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026bc:	f7fe fea0 	bl	8001400 <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026c2:	e028      	b.n	8002716 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff f833 	bl	8001734 <LL_ADC_IsEnabled>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d104      	bne.n	80026de <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff f803 	bl	80016e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026de:	f7fe fe8f 	bl	8001400 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d914      	bls.n	8002716 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d00d      	beq.n	8002716 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	f043 0210 	orr.w	r2, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270a:	f043 0201 	orr.w	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e007      	b.n	8002726 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d1cf      	bne.n	80026c4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	8000003f 	.word	0x8000003f

08002734 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff f80a 	bl	800175a <LL_ADC_IsDisableOngoing>
 8002746:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe fff1 	bl	8001734 <LL_ADC_IsEnabled>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d047      	beq.n	80027e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d144      	bne.n	80027e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030d 	and.w	r3, r3, #13
 8002768:	2b01      	cmp	r3, #1
 800276a:	d10c      	bne.n	8002786 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe ffcb 	bl	800170c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2203      	movs	r2, #3
 800277c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800277e:	f7fe fe3f 	bl	8001400 <HAL_GetTick>
 8002782:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002784:	e029      	b.n	80027da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f043 0210 	orr.w	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	f043 0201 	orr.w	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e023      	b.n	80027ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027a2:	f7fe fe2d 	bl	8001400 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d914      	bls.n	80027da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00d      	beq.n	80027da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	f043 0210 	orr.w	r2, r3, #16
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	f043 0201 	orr.w	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e007      	b.n	80027ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1dc      	bne.n	80027a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002810:	4013      	ands	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800281c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002826:	4a04      	ldr	r2, [pc, #16]	; (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	60d3      	str	r3, [r2, #12]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <__NVIC_GetPriorityGrouping+0x18>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	f003 0307 	and.w	r3, r3, #7
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	2b00      	cmp	r3, #0
 8002868:	db0b      	blt.n	8002882 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	4907      	ldr	r1, [pc, #28]	; (8002890 <__NVIC_EnableIRQ+0x38>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	2001      	movs	r0, #1
 800287a:	fa00 f202 	lsl.w	r2, r0, r2
 800287e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000e100 	.word	0xe000e100

08002894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	6039      	str	r1, [r7, #0]
 800289e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	db0a      	blt.n	80028be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	490c      	ldr	r1, [pc, #48]	; (80028e0 <__NVIC_SetPriority+0x4c>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	0112      	lsls	r2, r2, #4
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	440b      	add	r3, r1
 80028b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028bc:	e00a      	b.n	80028d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4908      	ldr	r1, [pc, #32]	; (80028e4 <__NVIC_SetPriority+0x50>)
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	3b04      	subs	r3, #4
 80028cc:	0112      	lsls	r2, r2, #4
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	440b      	add	r3, r1
 80028d2:	761a      	strb	r2, [r3, #24]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000e100 	.word	0xe000e100
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f1c3 0307 	rsb	r3, r3, #7
 8002902:	2b04      	cmp	r3, #4
 8002904:	bf28      	it	cs
 8002906:	2304      	movcs	r3, #4
 8002908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3304      	adds	r3, #4
 800290e:	2b06      	cmp	r3, #6
 8002910:	d902      	bls.n	8002918 <NVIC_EncodePriority+0x30>
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3b03      	subs	r3, #3
 8002916:	e000      	b.n	800291a <NVIC_EncodePriority+0x32>
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	401a      	ands	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002930:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	43d9      	mvns	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	4313      	orrs	r3, r2
         );
}
 8002942:	4618      	mov	r0, r3
 8002944:	3724      	adds	r7, #36	; 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002960:	d301      	bcc.n	8002966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002962:	2301      	movs	r3, #1
 8002964:	e00f      	b.n	8002986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <SysTick_Config+0x40>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296e:	210f      	movs	r1, #15
 8002970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002974:	f7ff ff8e 	bl	8002894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <SysTick_Config+0x40>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <SysTick_Config+0x40>)
 8002980:	2207      	movs	r2, #7
 8002982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	e000e010 	.word	0xe000e010

08002994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff29 	bl	80027f4 <__NVIC_SetPriorityGrouping>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029bc:	f7ff ff3e 	bl	800283c <__NVIC_GetPriorityGrouping>
 80029c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	6978      	ldr	r0, [r7, #20]
 80029c8:	f7ff ff8e 	bl	80028e8 <NVIC_EncodePriority>
 80029cc:	4602      	mov	r2, r0
 80029ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff5d 	bl	8002894 <__NVIC_SetPriority>
}
 80029da:	bf00      	nop
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff31 	bl	8002858 <__NVIC_EnableIRQ>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ffa2 	bl	8002950 <SysTick_Config>
 8002a0c:	4603      	mov	r3, r0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a26:	e148      	b.n	8002cba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 813a 	beq.w	8002cb4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d00b      	beq.n	8002a60 <HAL_GPIO_Init+0x48>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d007      	beq.n	8002a60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a54:	2b11      	cmp	r3, #17
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b12      	cmp	r3, #18
 8002a5e:	d130      	bne.n	8002ac2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a96:	2201      	movs	r2, #1
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 0201 	and.w	r2, r3, #1
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0xea>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b12      	cmp	r3, #18
 8002b00:	d123      	bne.n	8002b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	08da      	lsrs	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3208      	adds	r2, #8
 8002b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	220f      	movs	r2, #15
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	08da      	lsrs	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3208      	adds	r2, #8
 8002b44:	6939      	ldr	r1, [r7, #16]
 8002b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 0203 	and.w	r2, r3, #3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8094 	beq.w	8002cb4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8c:	4b52      	ldr	r3, [pc, #328]	; (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b90:	4a51      	ldr	r2, [pc, #324]	; (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6613      	str	r3, [r2, #96]	; 0x60
 8002b98:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ba4:	4a4d      	ldr	r2, [pc, #308]	; (8002cdc <HAL_GPIO_Init+0x2c4>)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	3302      	adds	r3, #2
 8002bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	220f      	movs	r2, #15
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bce:	d00d      	beq.n	8002bec <HAL_GPIO_Init+0x1d4>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a43      	ldr	r2, [pc, #268]	; (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d007      	beq.n	8002be8 <HAL_GPIO_Init+0x1d0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a42      	ldr	r2, [pc, #264]	; (8002ce4 <HAL_GPIO_Init+0x2cc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d101      	bne.n	8002be4 <HAL_GPIO_Init+0x1cc>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e004      	b.n	8002bee <HAL_GPIO_Init+0x1d6>
 8002be4:	2307      	movs	r3, #7
 8002be6:	e002      	b.n	8002bee <HAL_GPIO_Init+0x1d6>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <HAL_GPIO_Init+0x1d6>
 8002bec:	2300      	movs	r3, #0
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	f002 0203 	and.w	r2, r2, #3
 8002bf4:	0092      	lsls	r2, r2, #2
 8002bf6:	4093      	lsls	r3, r2
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bfe:	4937      	ldr	r1, [pc, #220]	; (8002cdc <HAL_GPIO_Init+0x2c4>)
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	3302      	adds	r3, #2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c0c:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c30:	4a2d      	ldr	r2, [pc, #180]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002c36:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c5a:	4a23      	ldr	r2, [pc, #140]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c84:	4a18      	ldr	r2, [pc, #96]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4013      	ands	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cae:	4a0e      	ldr	r2, [pc, #56]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f47f aeaf 	bne.w	8002a28 <HAL_GPIO_Init+0x10>
  }
}
 8002cca:	bf00      	nop
 8002ccc:	bf00      	nop
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40010000 	.word	0x40010000
 8002ce0:	48000400 	.word	0x48000400
 8002ce4:	48000800 	.word	0x48000800
 8002ce8:	40010400 	.word	0x40010400

08002cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	807b      	strh	r3, [r7, #2]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cfc:	787b      	ldrb	r3, [r7, #1]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d02:	887a      	ldrh	r2, [r7, #2]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d08:	e002      	b.n	8002d10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d0a:	887a      	ldrh	r2, [r7, #2]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2a:	6013      	str	r3, [r2, #0]
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40007000 	.word	0x40007000

08002d3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d40:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40007000 	.word	0x40007000

08002d58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d66:	d130      	bne.n	8002dca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d68:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d74:	d038      	beq.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d76:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d7e:	4a1e      	ldr	r2, [pc, #120]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d86:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2232      	movs	r2, #50	; 0x32
 8002d8c:	fb02 f303 	mul.w	r3, r2, r3
 8002d90:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	0c9b      	lsrs	r3, r3, #18
 8002d98:	3301      	adds	r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d9c:	e002      	b.n	8002da4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002da4:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db0:	d102      	bne.n	8002db8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f2      	bne.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc4:	d110      	bne.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e00f      	b.n	8002dea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dca:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd6:	d007      	beq.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dd8:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002de0:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002de6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	20000004 	.word	0x20000004
 8002e00:	431bde83 	.word	0x431bde83

08002e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f000 bc11 	b.w	800363a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e18:	4ba0      	ldr	r3, [pc, #640]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e22:	4b9e      	ldr	r3, [pc, #632]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80e4 	beq.w	8003002 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4c>
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	f040 808b 	bne.w	8002f5e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	f040 8087 	bne.w	8002f5e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e50:	4b92      	ldr	r3, [pc, #584]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_OscConfig+0x64>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e3e8      	b.n	800363a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1a      	ldr	r2, [r3, #32]
 8002e6c:	4b8b      	ldr	r3, [pc, #556]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <HAL_RCC_OscConfig+0x7e>
 8002e78:	4b88      	ldr	r3, [pc, #544]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e80:	e005      	b.n	8002e8e <HAL_RCC_OscConfig+0x8a>
 8002e82:	4b86      	ldr	r3, [pc, #536]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d223      	bcs.n	8002eda <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fd7a 	bl	8003990 <RCC_SetFlashLatencyFromMSIRange>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e3c9      	b.n	800363a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea6:	4b7d      	ldr	r3, [pc, #500]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a7c      	ldr	r2, [pc, #496]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002eac:	f043 0308 	orr.w	r3, r3, #8
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b7a      	ldr	r3, [pc, #488]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4977      	ldr	r1, [pc, #476]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec4:	4b75      	ldr	r3, [pc, #468]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	4972      	ldr	r1, [pc, #456]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
 8002ed8:	e025      	b.n	8002f26 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eda:	4b70      	ldr	r3, [pc, #448]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6f      	ldr	r2, [pc, #444]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b6d      	ldr	r3, [pc, #436]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	496a      	ldr	r1, [pc, #424]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef8:	4b68      	ldr	r3, [pc, #416]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	4965      	ldr	r1, [pc, #404]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fd3a 	bl	8003990 <RCC_SetFlashLatencyFromMSIRange>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e389      	b.n	800363a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f26:	f000 fc6f 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b5b      	ldr	r3, [pc, #364]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	495a      	ldr	r1, [pc, #360]	; (80030a0 <HAL_RCC_OscConfig+0x29c>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f42:	4a58      	ldr	r2, [pc, #352]	; (80030a4 <HAL_RCC_OscConfig+0x2a0>)
 8002f44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f46:	4b58      	ldr	r3, [pc, #352]	; (80030a8 <HAL_RCC_OscConfig+0x2a4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fa08 	bl	8001360 <HAL_InitTick>
 8002f50:	4603      	mov	r3, r0
 8002f52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d052      	beq.n	8003000 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	e36d      	b.n	800363a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d032      	beq.n	8002fcc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f66:	4b4d      	ldr	r3, [pc, #308]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a4c      	ldr	r2, [pc, #304]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f72:	f7fe fa45 	bl	8001400 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f7a:	f7fe fa41 	bl	8001400 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e356      	b.n	800363a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f8c:	4b43      	ldr	r3, [pc, #268]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f98:	4b40      	ldr	r3, [pc, #256]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a3f      	ldr	r2, [pc, #252]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002f9e:	f043 0308 	orr.w	r3, r3, #8
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	4b3d      	ldr	r3, [pc, #244]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	493a      	ldr	r1, [pc, #232]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	4935      	ldr	r1, [pc, #212]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
 8002fca:	e01a      	b.n	8003002 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fcc:	4b33      	ldr	r3, [pc, #204]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a32      	ldr	r2, [pc, #200]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fa12 	bl	8001400 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fe0:	f7fe fa0e 	bl	8001400 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e323      	b.n	800363a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ff2:	4b2a      	ldr	r3, [pc, #168]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x1dc>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d073      	beq.n	80030f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d005      	beq.n	8003020 <HAL_RCC_OscConfig+0x21c>
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b0c      	cmp	r3, #12
 8003018:	d10e      	bne.n	8003038 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d10b      	bne.n	8003038 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d063      	beq.n	80030f4 <HAL_RCC_OscConfig+0x2f0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d15f      	bne.n	80030f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e300      	b.n	800363a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003040:	d106      	bne.n	8003050 <HAL_RCC_OscConfig+0x24c>
 8003042:	4b16      	ldr	r3, [pc, #88]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a15      	ldr	r2, [pc, #84]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e01d      	b.n	800308c <HAL_RCC_OscConfig+0x288>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x270>
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <HAL_RCC_OscConfig+0x298>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a0f      	ldr	r2, [pc, #60]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8003060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b0d      	ldr	r3, [pc, #52]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a0c      	ldr	r2, [pc, #48]	; (800309c <HAL_RCC_OscConfig+0x298>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0x288>
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a08      	ldr	r2, [pc, #32]	; (800309c <HAL_RCC_OscConfig+0x298>)
 800307a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a05      	ldr	r2, [pc, #20]	; (800309c <HAL_RCC_OscConfig+0x298>)
 8003086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01b      	beq.n	80030cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe f9b4 	bl	8001400 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800309a:	e010      	b.n	80030be <HAL_RCC_OscConfig+0x2ba>
 800309c:	40021000 	.word	0x40021000
 80030a0:	08006514 	.word	0x08006514
 80030a4:	20000004 	.word	0x20000004
 80030a8:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7fe f9a8 	bl	8001400 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	; 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e2bd      	b.n	800363a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030be:	4baf      	ldr	r3, [pc, #700]	; (800337c <HAL_RCC_OscConfig+0x578>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x2a8>
 80030ca:	e014      	b.n	80030f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe f998 	bl	8001400 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d4:	f7fe f994 	bl	8001400 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	; 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e2a9      	b.n	800363a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030e6:	4ba5      	ldr	r3, [pc, #660]	; (800337c <HAL_RCC_OscConfig+0x578>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x2d0>
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d060      	beq.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d005      	beq.n	8003114 <HAL_RCC_OscConfig+0x310>
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d119      	bne.n	8003142 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d116      	bne.n	8003142 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003114:	4b99      	ldr	r3, [pc, #612]	; (800337c <HAL_RCC_OscConfig+0x578>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_OscConfig+0x328>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e286      	b.n	800363a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312c:	4b93      	ldr	r3, [pc, #588]	; (800337c <HAL_RCC_OscConfig+0x578>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	4990      	ldr	r1, [pc, #576]	; (800337c <HAL_RCC_OscConfig+0x578>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003140:	e040      	b.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d023      	beq.n	8003192 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800314a:	4b8c      	ldr	r3, [pc, #560]	; (800337c <HAL_RCC_OscConfig+0x578>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a8b      	ldr	r2, [pc, #556]	; (800337c <HAL_RCC_OscConfig+0x578>)
 8003150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fe f953 	bl	8001400 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315e:	f7fe f94f 	bl	8001400 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e264      	b.n	800363a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003170:	4b82      	ldr	r3, [pc, #520]	; (800337c <HAL_RCC_OscConfig+0x578>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317c:	4b7f      	ldr	r3, [pc, #508]	; (800337c <HAL_RCC_OscConfig+0x578>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	497c      	ldr	r1, [pc, #496]	; (800337c <HAL_RCC_OscConfig+0x578>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
 8003190:	e018      	b.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003192:	4b7a      	ldr	r3, [pc, #488]	; (800337c <HAL_RCC_OscConfig+0x578>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a79      	ldr	r2, [pc, #484]	; (800337c <HAL_RCC_OscConfig+0x578>)
 8003198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800319c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fe f92f 	bl	8001400 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a6:	f7fe f92b 	bl	8001400 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e240      	b.n	800363a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b8:	4b70      	ldr	r3, [pc, #448]	; (800337c <HAL_RCC_OscConfig+0x578>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f0      	bne.n	80031a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d03c      	beq.n	800324a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01c      	beq.n	8003212 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d8:	4b68      	ldr	r3, [pc, #416]	; (800337c <HAL_RCC_OscConfig+0x578>)
 80031da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031de:	4a67      	ldr	r2, [pc, #412]	; (800337c <HAL_RCC_OscConfig+0x578>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe f90a 	bl	8001400 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fe f906 	bl	8001400 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e21b      	b.n	800363a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003202:	4b5e      	ldr	r3, [pc, #376]	; (800337c <HAL_RCC_OscConfig+0x578>)
 8003204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ef      	beq.n	80031f0 <HAL_RCC_OscConfig+0x3ec>
 8003210:	e01b      	b.n	800324a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003212:	4b5a      	ldr	r3, [pc, #360]	; (800337c <HAL_RCC_OscConfig+0x578>)
 8003214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003218:	4a58      	ldr	r2, [pc, #352]	; (800337c <HAL_RCC_OscConfig+0x578>)
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003222:	f7fe f8ed 	bl	8001400 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800322a:	f7fe f8e9 	bl	8001400 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e1fe      	b.n	800363a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800323c:	4b4f      	ldr	r3, [pc, #316]	; (800337c <HAL_RCC_OscConfig+0x578>)
 800323e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ef      	bne.n	800322a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80a6 	beq.w	80033a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003258:	2300      	movs	r3, #0
 800325a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800325c:	4b47      	ldr	r3, [pc, #284]	; (800337c <HAL_RCC_OscConfig+0x578>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10d      	bne.n	8003284 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003268:	4b44      	ldr	r3, [pc, #272]	; (800337c <HAL_RCC_OscConfig+0x578>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326c:	4a43      	ldr	r2, [pc, #268]	; (800337c <HAL_RCC_OscConfig+0x578>)
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003272:	6593      	str	r3, [r2, #88]	; 0x58
 8003274:	4b41      	ldr	r3, [pc, #260]	; (800337c <HAL_RCC_OscConfig+0x578>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003280:	2301      	movs	r3, #1
 8003282:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003284:	4b3e      	ldr	r3, [pc, #248]	; (8003380 <HAL_RCC_OscConfig+0x57c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d118      	bne.n	80032c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003290:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <HAL_RCC_OscConfig+0x57c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a3a      	ldr	r2, [pc, #232]	; (8003380 <HAL_RCC_OscConfig+0x57c>)
 8003296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329c:	f7fe f8b0 	bl	8001400 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a4:	f7fe f8ac 	bl	8001400 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e1c1      	b.n	800363a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b6:	4b32      	ldr	r3, [pc, #200]	; (8003380 <HAL_RCC_OscConfig+0x57c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d108      	bne.n	80032dc <HAL_RCC_OscConfig+0x4d8>
 80032ca:	4b2c      	ldr	r3, [pc, #176]	; (800337c <HAL_RCC_OscConfig+0x578>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	4a2a      	ldr	r2, [pc, #168]	; (800337c <HAL_RCC_OscConfig+0x578>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032da:	e024      	b.n	8003326 <HAL_RCC_OscConfig+0x522>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b05      	cmp	r3, #5
 80032e2:	d110      	bne.n	8003306 <HAL_RCC_OscConfig+0x502>
 80032e4:	4b25      	ldr	r3, [pc, #148]	; (800337c <HAL_RCC_OscConfig+0x578>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	4a24      	ldr	r2, [pc, #144]	; (800337c <HAL_RCC_OscConfig+0x578>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032f4:	4b21      	ldr	r3, [pc, #132]	; (800337c <HAL_RCC_OscConfig+0x578>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	4a20      	ldr	r2, [pc, #128]	; (800337c <HAL_RCC_OscConfig+0x578>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003304:	e00f      	b.n	8003326 <HAL_RCC_OscConfig+0x522>
 8003306:	4b1d      	ldr	r3, [pc, #116]	; (800337c <HAL_RCC_OscConfig+0x578>)
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	4a1b      	ldr	r2, [pc, #108]	; (800337c <HAL_RCC_OscConfig+0x578>)
 800330e:	f023 0301 	bic.w	r3, r3, #1
 8003312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003316:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_RCC_OscConfig+0x578>)
 8003318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331c:	4a17      	ldr	r2, [pc, #92]	; (800337c <HAL_RCC_OscConfig+0x578>)
 800331e:	f023 0304 	bic.w	r3, r3, #4
 8003322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d016      	beq.n	800335c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332e:	f7fe f867 	bl	8001400 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003334:	e00a      	b.n	800334c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003336:	f7fe f863 	bl	8001400 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f241 3288 	movw	r2, #5000	; 0x1388
 8003344:	4293      	cmp	r3, r2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e176      	b.n	800363a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_OscConfig+0x578>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0ed      	beq.n	8003336 <HAL_RCC_OscConfig+0x532>
 800335a:	e01a      	b.n	8003392 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335c:	f7fe f850 	bl	8001400 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003362:	e00f      	b.n	8003384 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003364:	f7fe f84c 	bl	8001400 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d906      	bls.n	8003384 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e15f      	b.n	800363a <HAL_RCC_OscConfig+0x836>
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000
 8003380:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003384:	4baa      	ldr	r3, [pc, #680]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e8      	bne.n	8003364 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003392:	7ffb      	ldrb	r3, [r7, #31]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d105      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003398:	4ba5      	ldr	r3, [pc, #660]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	4aa4      	ldr	r2, [pc, #656]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 800339e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d03c      	beq.n	800342a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01c      	beq.n	80033f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033b8:	4b9d      	ldr	r3, [pc, #628]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80033ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033be:	4a9c      	ldr	r2, [pc, #624]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fe f81a 	bl	8001400 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033d0:	f7fe f816 	bl	8001400 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e12b      	b.n	800363a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033e2:	4b93      	ldr	r3, [pc, #588]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80033e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0ef      	beq.n	80033d0 <HAL_RCC_OscConfig+0x5cc>
 80033f0:	e01b      	b.n	800342a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033f2:	4b8f      	ldr	r3, [pc, #572]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80033f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033f8:	4a8d      	ldr	r2, [pc, #564]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7fd fffd 	bl	8001400 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800340a:	f7fd fff9 	bl	8001400 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e10e      	b.n	800363a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800341c:	4b84      	ldr	r3, [pc, #528]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 800341e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1ef      	bne.n	800340a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 8102 	beq.w	8003638 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	2b02      	cmp	r3, #2
 800343a:	f040 80c5 	bne.w	80035c8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800343e:	4b7c      	ldr	r3, [pc, #496]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0203 	and.w	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	429a      	cmp	r2, r3
 8003450:	d12c      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	3b01      	subs	r3, #1
 800345e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d123      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d11b      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d113      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	085b      	lsrs	r3, r3, #1
 8003490:	3b01      	subs	r3, #1
 8003492:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d109      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	3b01      	subs	r3, #1
 80034a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d067      	beq.n	800357c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d062      	beq.n	8003578 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034b2:	4b5f      	ldr	r3, [pc, #380]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e0bb      	b.n	800363a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034c2:	4b5b      	ldr	r3, [pc, #364]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a5a      	ldr	r2, [pc, #360]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80034c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034ce:	f7fd ff97 	bl	8001400 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d6:	f7fd ff93 	bl	8001400 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e0a8      	b.n	800363a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e8:	4b51      	ldr	r3, [pc, #324]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f0      	bne.n	80034d6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f4:	4b4e      	ldr	r3, [pc, #312]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	4b4e      	ldr	r3, [pc, #312]	; (8003634 <HAL_RCC_OscConfig+0x830>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003504:	3a01      	subs	r2, #1
 8003506:	0112      	lsls	r2, r2, #4
 8003508:	4311      	orrs	r1, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800350e:	0212      	lsls	r2, r2, #8
 8003510:	4311      	orrs	r1, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003516:	0852      	lsrs	r2, r2, #1
 8003518:	3a01      	subs	r2, #1
 800351a:	0552      	lsls	r2, r2, #21
 800351c:	4311      	orrs	r1, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003522:	0852      	lsrs	r2, r2, #1
 8003524:	3a01      	subs	r2, #1
 8003526:	0652      	lsls	r2, r2, #25
 8003528:	4311      	orrs	r1, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800352e:	06d2      	lsls	r2, r2, #27
 8003530:	430a      	orrs	r2, r1
 8003532:	493f      	ldr	r1, [pc, #252]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 8003534:	4313      	orrs	r3, r2
 8003536:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003538:	4b3d      	ldr	r3, [pc, #244]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a3c      	ldr	r2, [pc, #240]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 800353e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003542:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003544:	4b3a      	ldr	r3, [pc, #232]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a39      	ldr	r2, [pc, #228]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 800354a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003550:	f7fd ff56 	bl	8001400 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7fd ff52 	bl	8001400 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e067      	b.n	800363a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356a:	4b31      	ldr	r3, [pc, #196]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003576:	e05f      	b.n	8003638 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e05e      	b.n	800363a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357c:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d157      	bne.n	8003638 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003588:	4b29      	ldr	r3, [pc, #164]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a28      	ldr	r2, [pc, #160]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 800358e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003592:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003594:	4b26      	ldr	r3, [pc, #152]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a25      	ldr	r2, [pc, #148]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 800359a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800359e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035a0:	f7fd ff2e 	bl	8001400 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fd ff2a 	bl	8001400 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e03f      	b.n	800363a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ba:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x7a4>
 80035c6:	e037      	b.n	8003638 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b0c      	cmp	r3, #12
 80035cc:	d02d      	beq.n	800362a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ce:	4b18      	ldr	r3, [pc, #96]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a17      	ldr	r2, [pc, #92]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80035d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035da:	4b15      	ldr	r3, [pc, #84]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	4a11      	ldr	r2, [pc, #68]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80035ec:	f023 0303 	bic.w	r3, r3, #3
 80035f0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80035f2:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80035f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003600:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003602:	f7fd fefd 	bl	8001400 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360a:	f7fd fef9 	bl	8001400 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e00e      	b.n	800363a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800361c:	4b04      	ldr	r3, [pc, #16]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f0      	bne.n	800360a <HAL_RCC_OscConfig+0x806>
 8003628:	e006      	b.n	8003638 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e005      	b.n	800363a <HAL_RCC_OscConfig+0x836>
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop

08003644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0c8      	b.n	80037ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003658:	4b66      	ldr	r3, [pc, #408]	; (80037f4 <HAL_RCC_ClockConfig+0x1b0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d910      	bls.n	8003688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b63      	ldr	r3, [pc, #396]	; (80037f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 0207 	bic.w	r2, r3, #7
 800366e:	4961      	ldr	r1, [pc, #388]	; (80037f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b5f      	ldr	r3, [pc, #380]	; (80037f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0b0      	b.n	80037ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d04c      	beq.n	800372e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d107      	bne.n	80036ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369c:	4b56      	ldr	r3, [pc, #344]	; (80037f8 <HAL_RCC_ClockConfig+0x1b4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d121      	bne.n	80036ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e09e      	b.n	80037ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d107      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b4:	4b50      	ldr	r3, [pc, #320]	; (80037f8 <HAL_RCC_ClockConfig+0x1b4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d115      	bne.n	80036ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e092      	b.n	80037ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d107      	bne.n	80036dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036cc:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <HAL_RCC_ClockConfig+0x1b4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d109      	bne.n	80036ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e086      	b.n	80037ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036dc:	4b46      	ldr	r3, [pc, #280]	; (80037f8 <HAL_RCC_ClockConfig+0x1b4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e07e      	b.n	80037ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036ec:	4b42      	ldr	r3, [pc, #264]	; (80037f8 <HAL_RCC_ClockConfig+0x1b4>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f023 0203 	bic.w	r2, r3, #3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	493f      	ldr	r1, [pc, #252]	; (80037f8 <HAL_RCC_ClockConfig+0x1b4>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036fe:	f7fd fe7f 	bl	8001400 <HAL_GetTick>
 8003702:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003704:	e00a      	b.n	800371c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003706:	f7fd fe7b 	bl	8001400 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	; 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e066      	b.n	80037ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371c:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <HAL_RCC_ClockConfig+0x1b4>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 020c 	and.w	r2, r3, #12
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	429a      	cmp	r2, r3
 800372c:	d1eb      	bne.n	8003706 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800373a:	4b2f      	ldr	r3, [pc, #188]	; (80037f8 <HAL_RCC_ClockConfig+0x1b4>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	492c      	ldr	r1, [pc, #176]	; (80037f8 <HAL_RCC_ClockConfig+0x1b4>)
 8003748:	4313      	orrs	r3, r2
 800374a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800374c:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <HAL_RCC_ClockConfig+0x1b0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d210      	bcs.n	800377c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b26      	ldr	r3, [pc, #152]	; (80037f4 <HAL_RCC_ClockConfig+0x1b0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 0207 	bic.w	r2, r3, #7
 8003762:	4924      	ldr	r1, [pc, #144]	; (80037f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <HAL_RCC_ClockConfig+0x1b0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e036      	b.n	80037ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003788:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <HAL_RCC_ClockConfig+0x1b4>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4918      	ldr	r1, [pc, #96]	; (80037f8 <HAL_RCC_ClockConfig+0x1b4>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a6:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HAL_RCC_ClockConfig+0x1b4>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4910      	ldr	r1, [pc, #64]	; (80037f8 <HAL_RCC_ClockConfig+0x1b4>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037ba:	f000 f825 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 80037be:	4602      	mov	r2, r0
 80037c0:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <HAL_RCC_ClockConfig+0x1b4>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	490c      	ldr	r1, [pc, #48]	; (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 80037cc:	5ccb      	ldrb	r3, [r1, r3]
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037da:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <HAL_RCC_ClockConfig+0x1c0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd fdbe 	bl	8001360 <HAL_InitTick>
 80037e4:	4603      	mov	r3, r0
 80037e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80037e8:	7afb      	ldrb	r3, [r7, #11]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40022000 	.word	0x40022000
 80037f8:	40021000 	.word	0x40021000
 80037fc:	08006514 	.word	0x08006514
 8003800:	20000004 	.word	0x20000004
 8003804:	20000008 	.word	0x20000008

08003808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	; 0x24
 800380c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003816:	4b3e      	ldr	r3, [pc, #248]	; (8003910 <HAL_RCC_GetSysClockFreq+0x108>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003820:	4b3b      	ldr	r3, [pc, #236]	; (8003910 <HAL_RCC_GetSysClockFreq+0x108>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x34>
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	2b0c      	cmp	r3, #12
 8003834:	d121      	bne.n	800387a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d11e      	bne.n	800387a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800383c:	4b34      	ldr	r3, [pc, #208]	; (8003910 <HAL_RCC_GetSysClockFreq+0x108>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d107      	bne.n	8003858 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003848:	4b31      	ldr	r3, [pc, #196]	; (8003910 <HAL_RCC_GetSysClockFreq+0x108>)
 800384a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	e005      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003858:	4b2d      	ldr	r3, [pc, #180]	; (8003910 <HAL_RCC_GetSysClockFreq+0x108>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003864:	4a2b      	ldr	r2, [pc, #172]	; (8003914 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10d      	bne.n	8003890 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003878:	e00a      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	2b04      	cmp	r3, #4
 800387e:	d102      	bne.n	8003886 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003880:	4b25      	ldr	r3, [pc, #148]	; (8003918 <HAL_RCC_GetSysClockFreq+0x110>)
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	e004      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d101      	bne.n	8003890 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800388c:	4b23      	ldr	r3, [pc, #140]	; (800391c <HAL_RCC_GetSysClockFreq+0x114>)
 800388e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	2b0c      	cmp	r3, #12
 8003894:	d134      	bne.n	8003900 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003896:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <HAL_RCC_GetSysClockFreq+0x108>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d003      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0xa6>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d003      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0xac>
 80038ac:	e005      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038ae:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <HAL_RCC_GetSysClockFreq+0x110>)
 80038b0:	617b      	str	r3, [r7, #20]
      break;
 80038b2:	e005      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038b4:	4b19      	ldr	r3, [pc, #100]	; (800391c <HAL_RCC_GetSysClockFreq+0x114>)
 80038b6:	617b      	str	r3, [r7, #20]
      break;
 80038b8:	e002      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	617b      	str	r3, [r7, #20]
      break;
 80038be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038c0:	4b13      	ldr	r3, [pc, #76]	; (8003910 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	3301      	adds	r3, #1
 80038cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	0a1b      	lsrs	r3, r3, #8
 80038d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	fb02 f203 	mul.w	r2, r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	0e5b      	lsrs	r3, r3, #25
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	3301      	adds	r3, #1
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003900:	69bb      	ldr	r3, [r7, #24]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3724      	adds	r7, #36	; 0x24
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
 8003914:	0800652c 	.word	0x0800652c
 8003918:	00f42400 	.word	0x00f42400
 800391c:	007a1200 	.word	0x007a1200

08003920 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_RCC_GetHCLKFreq+0x14>)
 8003926:	681b      	ldr	r3, [r3, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000004 	.word	0x20000004

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800393c:	f7ff fff0 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4904      	ldr	r1, [pc, #16]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40021000 	.word	0x40021000
 8003960:	08006524 	.word	0x08006524

08003964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003968:	f7ff ffda 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	0adb      	lsrs	r3, r3, #11
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4904      	ldr	r1, [pc, #16]	; (800398c <HAL_RCC_GetPCLK2Freq+0x28>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	08006524 	.word	0x08006524

08003990 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800399c:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039a8:	f7ff f9c8 	bl	8002d3c <HAL_PWREx_GetVoltageRange>
 80039ac:	6178      	str	r0, [r7, #20]
 80039ae:	e014      	b.n	80039da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039b0:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b4:	4a24      	ldr	r2, [pc, #144]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ba:	6593      	str	r3, [r2, #88]	; 0x58
 80039bc:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039c8:	f7ff f9b8 	bl	8002d3c <HAL_PWREx_GetVoltageRange>
 80039cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039ce:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e0:	d10b      	bne.n	80039fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b80      	cmp	r3, #128	; 0x80
 80039e6:	d919      	bls.n	8003a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2ba0      	cmp	r3, #160	; 0xa0
 80039ec:	d902      	bls.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039ee:	2302      	movs	r3, #2
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	e013      	b.n	8003a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039f4:	2301      	movs	r3, #1
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	e010      	b.n	8003a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b80      	cmp	r3, #128	; 0x80
 80039fe:	d902      	bls.n	8003a06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a00:	2303      	movs	r3, #3
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	e00a      	b.n	8003a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b80      	cmp	r3, #128	; 0x80
 8003a0a:	d102      	bne.n	8003a12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	e004      	b.n	8003a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b70      	cmp	r3, #112	; 0x70
 8003a16:	d101      	bne.n	8003a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a18:	2301      	movs	r3, #1
 8003a1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f023 0207 	bic.w	r2, r3, #7
 8003a24:	4909      	ldr	r1, [pc, #36]	; (8003a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a2c:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d001      	beq.n	8003a3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40022000 	.word	0x40022000

08003a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a58:	2300      	movs	r3, #0
 8003a5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d031      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a74:	d01a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003a76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a7a:	d814      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d009      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a84:	d10f      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003a86:	4bac      	ldr	r3, [pc, #688]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	4aab      	ldr	r2, [pc, #684]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a90:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a92:	e00c      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f9dc 	bl	8003e58 <RCCEx_PLLSAI1_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aa4:	e003      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	74fb      	strb	r3, [r7, #19]
      break;
 8003aaa:	e000      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ab4:	4ba0      	ldr	r3, [pc, #640]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac2:	499d      	ldr	r1, [pc, #628]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003aca:	e001      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	7cfb      	ldrb	r3, [r7, #19]
 8003ace:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8099 	beq.w	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ae2:	4b95      	ldr	r3, [pc, #596]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003af2:	2300      	movs	r3, #0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00d      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af8:	4b8f      	ldr	r3, [pc, #572]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	4a8e      	ldr	r2, [pc, #568]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b02:	6593      	str	r3, [r2, #88]	; 0x58
 8003b04:	4b8c      	ldr	r3, [pc, #560]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b10:	2301      	movs	r3, #1
 8003b12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b14:	4b89      	ldr	r3, [pc, #548]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a88      	ldr	r2, [pc, #544]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b20:	f7fd fc6e 	bl	8001400 <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b26:	e009      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b28:	f7fd fc6a 	bl	8001400 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d902      	bls.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	74fb      	strb	r3, [r7, #19]
        break;
 8003b3a:	e005      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b3c:	4b7f      	ldr	r3, [pc, #508]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ef      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d155      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b4e:	4b7a      	ldr	r3, [pc, #488]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01e      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d019      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b6a:	4b73      	ldr	r3, [pc, #460]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b74:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b76:	4b70      	ldr	r3, [pc, #448]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	4a6e      	ldr	r2, [pc, #440]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b86:	4b6c      	ldr	r3, [pc, #432]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8c:	4a6a      	ldr	r2, [pc, #424]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b96:	4a68      	ldr	r2, [pc, #416]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d016      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba8:	f7fd fc2a 	bl	8001400 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb0:	f7fd fc26 	bl	8001400 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d902      	bls.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	74fb      	strb	r3, [r7, #19]
            break;
 8003bc6:	e006      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc8:	4b5b      	ldr	r3, [pc, #364]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0ec      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003bd6:	7cfb      	ldrb	r3, [r7, #19]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10b      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bdc:	4b56      	ldr	r3, [pc, #344]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bea:	4953      	ldr	r1, [pc, #332]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bf2:	e004      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	74bb      	strb	r3, [r7, #18]
 8003bf8:	e001      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfe:	7c7b      	ldrb	r3, [r7, #17]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c04:	4b4c      	ldr	r3, [pc, #304]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c08:	4a4b      	ldr	r2, [pc, #300]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c1c:	4b46      	ldr	r3, [pc, #280]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f023 0203 	bic.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	4943      	ldr	r1, [pc, #268]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c3e:	4b3e      	ldr	r3, [pc, #248]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f023 020c 	bic.w	r2, r3, #12
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	493a      	ldr	r1, [pc, #232]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c60:	4b35      	ldr	r3, [pc, #212]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	4932      	ldr	r1, [pc, #200]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c82:	4b2d      	ldr	r3, [pc, #180]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c90:	4929      	ldr	r1, [pc, #164]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ca4:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	4921      	ldr	r1, [pc, #132]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cc6:	4b1c      	ldr	r3, [pc, #112]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	4918      	ldr	r1, [pc, #96]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ce8:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	4910      	ldr	r1, [pc, #64]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d02c      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	4907      	ldr	r1, [pc, #28]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d28:	d10a      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d2a:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	4a02      	ldr	r2, [pc, #8]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d34:	60d3      	str	r3, [r2, #12]
 8003d36:	e015      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d48:	d10c      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	2101      	movs	r1, #1
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 f881 	bl	8003e58 <RCCEx_PLLSAI1_Config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003d60:	7cfb      	ldrb	r3, [r7, #19]
 8003d62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d028      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d70:	4b30      	ldr	r3, [pc, #192]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	492d      	ldr	r1, [pc, #180]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d90:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4a27      	ldr	r2, [pc, #156]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d9a:	60d3      	str	r3, [r2, #12]
 8003d9c:	e011      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003da6:	d10c      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f852 	bl	8003e58 <RCCEx_PLLSAI1_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003dbe:	7cfb      	ldrb	r3, [r7, #19]
 8003dc0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d01c      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dce:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ddc:	4915      	ldr	r1, [pc, #84]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2102      	movs	r1, #2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f82f 	bl	8003e58 <RCCEx_PLLSAI1_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dfe:	7cfb      	ldrb	r3, [r7, #19]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003e04:	7cfb      	ldrb	r3, [r7, #19]
 8003e06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e14:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e22:	4904      	ldr	r1, [pc, #16]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40021000 	.word	0x40021000

08003e38 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e42:	f043 0304 	orr.w	r3, r3, #4
 8003e46:	6013      	str	r3, [r2, #0]
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000

08003e58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e66:	4b74      	ldr	r3, [pc, #464]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d018      	beq.n	8003ea4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e72:	4b71      	ldr	r3, [pc, #452]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0203 	and.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d10d      	bne.n	8003e9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
       ||
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e8a:	4b6b      	ldr	r3, [pc, #428]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
       ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d047      	beq.n	8003f2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
 8003ea2:	e044      	b.n	8003f2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d018      	beq.n	8003ede <RCCEx_PLLSAI1_Config+0x86>
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d825      	bhi.n	8003efc <RCCEx_PLLSAI1_Config+0xa4>
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d002      	beq.n	8003eba <RCCEx_PLLSAI1_Config+0x62>
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d009      	beq.n	8003ecc <RCCEx_PLLSAI1_Config+0x74>
 8003eb8:	e020      	b.n	8003efc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eba:	4b5f      	ldr	r3, [pc, #380]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d11d      	bne.n	8003f02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eca:	e01a      	b.n	8003f02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ecc:	4b5a      	ldr	r3, [pc, #360]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d116      	bne.n	8003f06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003edc:	e013      	b.n	8003f06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ede:	4b56      	ldr	r3, [pc, #344]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10f      	bne.n	8003f0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eea:	4b53      	ldr	r3, [pc, #332]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003efa:	e006      	b.n	8003f0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
      break;
 8003f00:	e004      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f02:	bf00      	nop
 8003f04:	e002      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10d      	bne.n	8003f2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f12:	4b49      	ldr	r3, [pc, #292]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	430b      	orrs	r3, r1
 8003f28:	4943      	ldr	r1, [pc, #268]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d17c      	bne.n	800402e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f34:	4b40      	ldr	r3, [pc, #256]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a3f      	ldr	r2, [pc, #252]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f40:	f7fd fa5e 	bl	8001400 <HAL_GetTick>
 8003f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f46:	e009      	b.n	8003f5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f48:	f7fd fa5a 	bl	8001400 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d902      	bls.n	8003f5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	73fb      	strb	r3, [r7, #15]
        break;
 8003f5a:	e005      	b.n	8003f68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f5c:	4b36      	ldr	r3, [pc, #216]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ef      	bne.n	8003f48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d15f      	bne.n	800402e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d110      	bne.n	8003f96 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f74:	4b30      	ldr	r3, [pc, #192]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003f7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6892      	ldr	r2, [r2, #8]
 8003f84:	0211      	lsls	r1, r2, #8
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68d2      	ldr	r2, [r2, #12]
 8003f8a:	06d2      	lsls	r2, r2, #27
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	492a      	ldr	r1, [pc, #168]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	610b      	str	r3, [r1, #16]
 8003f94:	e027      	b.n	8003fe6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d112      	bne.n	8003fc2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f9c:	4b26      	ldr	r3, [pc, #152]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6892      	ldr	r2, [r2, #8]
 8003fac:	0211      	lsls	r1, r2, #8
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6912      	ldr	r2, [r2, #16]
 8003fb2:	0852      	lsrs	r2, r2, #1
 8003fb4:	3a01      	subs	r2, #1
 8003fb6:	0552      	lsls	r2, r2, #21
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	491f      	ldr	r1, [pc, #124]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	610b      	str	r3, [r1, #16]
 8003fc0:	e011      	b.n	8003fe6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6892      	ldr	r2, [r2, #8]
 8003fd2:	0211      	lsls	r1, r2, #8
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6952      	ldr	r2, [r2, #20]
 8003fd8:	0852      	lsrs	r2, r2, #1
 8003fda:	3a01      	subs	r2, #1
 8003fdc:	0652      	lsls	r2, r2, #25
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	4915      	ldr	r1, [pc, #84]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fe6:	4b14      	ldr	r3, [pc, #80]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a13      	ldr	r2, [pc, #76]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ff0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff2:	f7fd fa05 	bl	8001400 <HAL_GetTick>
 8003ff6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ff8:	e009      	b.n	800400e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ffa:	f7fd fa01 	bl	8001400 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d902      	bls.n	800400e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	73fb      	strb	r3, [r7, #15]
          break;
 800400c:	e005      	b.n	800401a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800400e:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0ef      	beq.n	8003ffa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	4903      	ldr	r1, [pc, #12]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e0>)
 800402a:	4313      	orrs	r3, r2
 800402c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800402e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000

0800403c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e049      	b.n	80040e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fc fffe 	bl	8001064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f000 fc38 	bl	80048f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d001      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e03b      	b.n	800417c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a19      	ldr	r2, [pc, #100]	; (8004188 <HAL_TIM_Base_Start_IT+0x9c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d009      	beq.n	800413a <HAL_TIM_Base_Start_IT+0x4e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412e:	d004      	beq.n	800413a <HAL_TIM_Base_Start_IT+0x4e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a15      	ldr	r2, [pc, #84]	; (800418c <HAL_TIM_Base_Start_IT+0xa0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d115      	bne.n	8004166 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	4b13      	ldr	r3, [pc, #76]	; (8004190 <HAL_TIM_Base_Start_IT+0xa4>)
 8004142:	4013      	ands	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b06      	cmp	r3, #6
 800414a:	d015      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x8c>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004152:	d011      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004164:	e008      	b.n	8004178 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0201 	orr.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	e000      	b.n	800417a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004178:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	40012c00 	.word	0x40012c00
 800418c:	40014000 	.word	0x40014000
 8004190:	00010007 	.word	0x00010007

08004194 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6a1a      	ldr	r2, [r3, #32]
 80041b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10f      	bne.n	80041dc <HAL_TIM_Base_Stop_IT+0x48>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6a1a      	ldr	r2, [r3, #32]
 80041c2:	f240 4344 	movw	r3, #1092	; 0x444
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d107      	bne.n	80041dc <HAL_TIM_Base_Stop_IT+0x48>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e049      	b.n	8004298 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d106      	bne.n	800421e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f841 	bl	80042a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3304      	adds	r3, #4
 800422e:	4619      	mov	r1, r3
 8004230:	4610      	mov	r0, r2
 8004232:	f000 fb5d 	bl	80048f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d122      	bne.n	8004310 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d11b      	bne.n	8004310 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0202 	mvn.w	r2, #2
 80042e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fadc 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 face 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fadf 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b04      	cmp	r3, #4
 800431c:	d122      	bne.n	8004364 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b04      	cmp	r3, #4
 800432a:	d11b      	bne.n	8004364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0204 	mvn.w	r2, #4
 8004334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fab2 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 faa4 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fab5 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b08      	cmp	r3, #8
 8004370:	d122      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b08      	cmp	r3, #8
 800437e:	d11b      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0208 	mvn.w	r2, #8
 8004388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2204      	movs	r2, #4
 800438e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa88 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 80043a4:	e005      	b.n	80043b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fa7a 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fa8b 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d122      	bne.n	800440c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d11b      	bne.n	800440c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0210 	mvn.w	r2, #16
 80043dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2208      	movs	r2, #8
 80043e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fa5e 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 80043f8:	e005      	b.n	8004406 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fa50 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fa61 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10e      	bne.n	8004438 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b01      	cmp	r3, #1
 8004426:	d107      	bne.n	8004438 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0201 	mvn.w	r2, #1
 8004430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc fbfa 	bl	8000c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004442:	2b80      	cmp	r3, #128	; 0x80
 8004444:	d10e      	bne.n	8004464 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004450:	2b80      	cmp	r3, #128	; 0x80
 8004452:	d107      	bne.n	8004464 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800445c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 ffa6 	bl	80053b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004472:	d10e      	bne.n	8004492 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447e:	2b80      	cmp	r3, #128	; 0x80
 8004480:	d107      	bne.n	8004492 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800448a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 ff99 	bl	80053c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d10e      	bne.n	80044be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044aa:	2b40      	cmp	r3, #64	; 0x40
 80044ac:	d107      	bne.n	80044be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fa0f 	bl	80048dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d10e      	bne.n	80044ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d107      	bne.n	80044ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f06f 0220 	mvn.w	r2, #32
 80044e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 ff59 	bl	800539c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800450a:	2302      	movs	r3, #2
 800450c:	e0fd      	b.n	800470a <HAL_TIM_PWM_ConfigChannel+0x216>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b14      	cmp	r3, #20
 800451a:	f200 80f0 	bhi.w	80046fe <HAL_TIM_PWM_ConfigChannel+0x20a>
 800451e:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004524:	08004579 	.word	0x08004579
 8004528:	080046ff 	.word	0x080046ff
 800452c:	080046ff 	.word	0x080046ff
 8004530:	080046ff 	.word	0x080046ff
 8004534:	080045b9 	.word	0x080045b9
 8004538:	080046ff 	.word	0x080046ff
 800453c:	080046ff 	.word	0x080046ff
 8004540:	080046ff 	.word	0x080046ff
 8004544:	080045fb 	.word	0x080045fb
 8004548:	080046ff 	.word	0x080046ff
 800454c:	080046ff 	.word	0x080046ff
 8004550:	080046ff 	.word	0x080046ff
 8004554:	0800463b 	.word	0x0800463b
 8004558:	080046ff 	.word	0x080046ff
 800455c:	080046ff 	.word	0x080046ff
 8004560:	080046ff 	.word	0x080046ff
 8004564:	0800467d 	.word	0x0800467d
 8004568:	080046ff 	.word	0x080046ff
 800456c:	080046ff 	.word	0x080046ff
 8004570:	080046ff 	.word	0x080046ff
 8004574:	080046bd 	.word	0x080046bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68b9      	ldr	r1, [r7, #8]
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fa1a 	bl	80049b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0208 	orr.w	r2, r2, #8
 8004592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0204 	bic.w	r2, r2, #4
 80045a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6999      	ldr	r1, [r3, #24]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	619a      	str	r2, [r3, #24]
      break;
 80045b6:	e0a3      	b.n	8004700 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fa76 	bl	8004ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6999      	ldr	r1, [r3, #24]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	021a      	lsls	r2, r3, #8
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	619a      	str	r2, [r3, #24]
      break;
 80045f8:	e082      	b.n	8004700 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	4618      	mov	r0, r3
 8004602:	f000 facf 	bl	8004ba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0208 	orr.w	r2, r2, #8
 8004614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69da      	ldr	r2, [r3, #28]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0204 	bic.w	r2, r2, #4
 8004624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69d9      	ldr	r1, [r3, #28]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	61da      	str	r2, [r3, #28]
      break;
 8004638:	e062      	b.n	8004700 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fb27 	bl	8004c94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69da      	ldr	r2, [r3, #28]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69d9      	ldr	r1, [r3, #28]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	021a      	lsls	r2, r3, #8
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	61da      	str	r2, [r3, #28]
      break;
 800467a:	e041      	b.n	8004700 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fb64 	bl	8004d50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0208 	orr.w	r2, r2, #8
 8004696:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0204 	bic.w	r2, r2, #4
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	691a      	ldr	r2, [r3, #16]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046ba:	e021      	b.n	8004700 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fb9c 	bl	8004e00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	021a      	lsls	r2, r3, #8
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046fc:	e000      	b.n	8004700 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80046fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop

08004714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_TIM_ConfigClockSource+0x18>
 8004728:	2302      	movs	r3, #2
 800472a:	e0b5      	b.n	8004898 <HAL_TIM_ConfigClockSource+0x184>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800474e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004756:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004768:	d03e      	beq.n	80047e8 <HAL_TIM_ConfigClockSource+0xd4>
 800476a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476e:	f200 8087 	bhi.w	8004880 <HAL_TIM_ConfigClockSource+0x16c>
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004776:	f000 8085 	beq.w	8004884 <HAL_TIM_ConfigClockSource+0x170>
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477e:	d87f      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b70      	cmp	r3, #112	; 0x70
 8004782:	d01a      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0xa6>
 8004784:	2b70      	cmp	r3, #112	; 0x70
 8004786:	d87b      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b60      	cmp	r3, #96	; 0x60
 800478a:	d050      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x11a>
 800478c:	2b60      	cmp	r3, #96	; 0x60
 800478e:	d877      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x16c>
 8004790:	2b50      	cmp	r3, #80	; 0x50
 8004792:	d03c      	beq.n	800480e <HAL_TIM_ConfigClockSource+0xfa>
 8004794:	2b50      	cmp	r3, #80	; 0x50
 8004796:	d873      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x16c>
 8004798:	2b40      	cmp	r3, #64	; 0x40
 800479a:	d058      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x13a>
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d86f      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x16c>
 80047a0:	2b30      	cmp	r3, #48	; 0x30
 80047a2:	d064      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x15a>
 80047a4:	2b30      	cmp	r3, #48	; 0x30
 80047a6:	d86b      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x16c>
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d060      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x15a>
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d867      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x16c>
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d05c      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x15a>
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d05a      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047b8:	e062      	b.n	8004880 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6899      	ldr	r1, [r3, #8]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f000 fbed 	bl	8004fa8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	609a      	str	r2, [r3, #8]
      break;
 80047e6:	e04e      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6899      	ldr	r1, [r3, #8]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f000 fbd6 	bl	8004fa8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800480a:	609a      	str	r2, [r3, #8]
      break;
 800480c:	e03b      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	461a      	mov	r2, r3
 800481c:	f000 fb4a 	bl	8004eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2150      	movs	r1, #80	; 0x50
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fba3 	bl	8004f72 <TIM_ITRx_SetConfig>
      break;
 800482c:	e02b      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	461a      	mov	r2, r3
 800483c:	f000 fb69 	bl	8004f12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2160      	movs	r1, #96	; 0x60
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fb93 	bl	8004f72 <TIM_ITRx_SetConfig>
      break;
 800484c:	e01b      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6859      	ldr	r1, [r3, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	461a      	mov	r2, r3
 800485c:	f000 fb2a 	bl	8004eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2140      	movs	r1, #64	; 0x40
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fb83 	bl	8004f72 <TIM_ITRx_SetConfig>
      break;
 800486c:	e00b      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4619      	mov	r1, r3
 8004878:	4610      	mov	r0, r2
 800487a:	f000 fb7a 	bl	8004f72 <TIM_ITRx_SetConfig>
        break;
 800487e:	e002      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004880:	bf00      	nop
 8004882:	e000      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004884:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a2a      	ldr	r2, [pc, #168]	; (80049ac <TIM_Base_SetConfig+0xbc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_Base_SetConfig+0x20>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490e:	d108      	bne.n	8004922 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a21      	ldr	r2, [pc, #132]	; (80049ac <TIM_Base_SetConfig+0xbc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00b      	beq.n	8004942 <TIM_Base_SetConfig+0x52>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d007      	beq.n	8004942 <TIM_Base_SetConfig+0x52>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <TIM_Base_SetConfig+0xc0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <TIM_Base_SetConfig+0x52>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <TIM_Base_SetConfig+0xc4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d108      	bne.n	8004954 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a0c      	ldr	r2, [pc, #48]	; (80049ac <TIM_Base_SetConfig+0xbc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <TIM_Base_SetConfig+0xa0>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a0b      	ldr	r2, [pc, #44]	; (80049b0 <TIM_Base_SetConfig+0xc0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_Base_SetConfig+0xa0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a0a      	ldr	r2, [pc, #40]	; (80049b4 <TIM_Base_SetConfig+0xc4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d103      	bne.n	8004998 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	615a      	str	r2, [r3, #20]
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40014000 	.word	0x40014000
 80049b4:	40014400 	.word	0x40014400

080049b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f023 0302 	bic.w	r3, r3, #2
 8004a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a24      	ldr	r2, [pc, #144]	; (8004aa4 <TIM_OC1_SetConfig+0xec>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d007      	beq.n	8004a28 <TIM_OC1_SetConfig+0x70>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a23      	ldr	r2, [pc, #140]	; (8004aa8 <TIM_OC1_SetConfig+0xf0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_OC1_SetConfig+0x70>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a22      	ldr	r2, [pc, #136]	; (8004aac <TIM_OC1_SetConfig+0xf4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d10c      	bne.n	8004a42 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f023 0308 	bic.w	r3, r3, #8
 8004a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f023 0304 	bic.w	r3, r3, #4
 8004a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a17      	ldr	r2, [pc, #92]	; (8004aa4 <TIM_OC1_SetConfig+0xec>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d007      	beq.n	8004a5a <TIM_OC1_SetConfig+0xa2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a16      	ldr	r2, [pc, #88]	; (8004aa8 <TIM_OC1_SetConfig+0xf0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_OC1_SetConfig+0xa2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a15      	ldr	r2, [pc, #84]	; (8004aac <TIM_OC1_SetConfig+0xf4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d111      	bne.n	8004a7e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	621a      	str	r2, [r3, #32]
}
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	40014000 	.word	0x40014000
 8004aac:	40014400 	.word	0x40014400

08004ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f023 0210 	bic.w	r2, r3, #16
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f023 0320 	bic.w	r3, r3, #32
 8004afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <TIM_OC2_SetConfig+0xe8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d10d      	bne.n	8004b30 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a19      	ldr	r2, [pc, #100]	; (8004b98 <TIM_OC2_SetConfig+0xe8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d007      	beq.n	8004b48 <TIM_OC2_SetConfig+0x98>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a18      	ldr	r2, [pc, #96]	; (8004b9c <TIM_OC2_SetConfig+0xec>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d003      	beq.n	8004b48 <TIM_OC2_SetConfig+0x98>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <TIM_OC2_SetConfig+0xf0>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d113      	bne.n	8004b70 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40012c00 	.word	0x40012c00
 8004b9c:	40014000 	.word	0x40014000
 8004ba0:	40014400 	.word	0x40014400

08004ba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0303 	bic.w	r3, r3, #3
 8004bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	021b      	lsls	r3, r3, #8
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a21      	ldr	r2, [pc, #132]	; (8004c88 <TIM_OC3_SetConfig+0xe4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d10d      	bne.n	8004c22 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <TIM_OC3_SetConfig+0xe4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d007      	beq.n	8004c3a <TIM_OC3_SetConfig+0x96>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a17      	ldr	r2, [pc, #92]	; (8004c8c <TIM_OC3_SetConfig+0xe8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d003      	beq.n	8004c3a <TIM_OC3_SetConfig+0x96>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a16      	ldr	r2, [pc, #88]	; (8004c90 <TIM_OC3_SetConfig+0xec>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d113      	bne.n	8004c62 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	621a      	str	r2, [r3, #32]
}
 8004c7c:	bf00      	nop
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	40014400 	.word	0x40014400

08004c94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	031b      	lsls	r3, r3, #12
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a14      	ldr	r2, [pc, #80]	; (8004d44 <TIM_OC4_SetConfig+0xb0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d007      	beq.n	8004d08 <TIM_OC4_SetConfig+0x74>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a13      	ldr	r2, [pc, #76]	; (8004d48 <TIM_OC4_SetConfig+0xb4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <TIM_OC4_SetConfig+0x74>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a12      	ldr	r2, [pc, #72]	; (8004d4c <TIM_OC4_SetConfig+0xb8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d109      	bne.n	8004d1c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	019b      	lsls	r3, r3, #6
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	621a      	str	r2, [r3, #32]
}
 8004d36:	bf00      	nop
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40012c00 	.word	0x40012c00
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40014400 	.word	0x40014400

08004d50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a13      	ldr	r2, [pc, #76]	; (8004df4 <TIM_OC5_SetConfig+0xa4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d007      	beq.n	8004dba <TIM_OC5_SetConfig+0x6a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a12      	ldr	r2, [pc, #72]	; (8004df8 <TIM_OC5_SetConfig+0xa8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d003      	beq.n	8004dba <TIM_OC5_SetConfig+0x6a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a11      	ldr	r2, [pc, #68]	; (8004dfc <TIM_OC5_SetConfig+0xac>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d109      	bne.n	8004dce <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	621a      	str	r2, [r3, #32]
}
 8004de8:	bf00      	nop
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	40012c00 	.word	0x40012c00
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	40014400 	.word	0x40014400

08004e00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	021b      	lsls	r3, r3, #8
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	051b      	lsls	r3, r3, #20
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a14      	ldr	r2, [pc, #80]	; (8004ea8 <TIM_OC6_SetConfig+0xa8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d007      	beq.n	8004e6c <TIM_OC6_SetConfig+0x6c>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a13      	ldr	r2, [pc, #76]	; (8004eac <TIM_OC6_SetConfig+0xac>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_OC6_SetConfig+0x6c>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a12      	ldr	r2, [pc, #72]	; (8004eb0 <TIM_OC6_SetConfig+0xb0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d109      	bne.n	8004e80 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	029b      	lsls	r3, r3, #10
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	40014400 	.word	0x40014400

08004eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f023 0201 	bic.w	r2, r3, #1
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f023 030a 	bic.w	r3, r3, #10
 8004ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	621a      	str	r2, [r3, #32]
}
 8004f06:	bf00      	nop
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b087      	sub	sp, #28
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	f023 0210 	bic.w	r2, r3, #16
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	031b      	lsls	r3, r3, #12
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	621a      	str	r2, [r3, #32]
}
 8004f66:	bf00      	nop
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f043 0307 	orr.w	r3, r3, #7
 8004f94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	609a      	str	r2, [r3, #8]
}
 8004f9c:	bf00      	nop
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	021a      	lsls	r2, r3, #8
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	609a      	str	r2, [r3, #8]
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d109      	bne.n	800500c <HAL_TIMEx_PWMN_Start+0x24>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b01      	cmp	r3, #1
 8005002:	bf14      	ite	ne
 8005004:	2301      	movne	r3, #1
 8005006:	2300      	moveq	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	e022      	b.n	8005052 <HAL_TIMEx_PWMN_Start+0x6a>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b04      	cmp	r3, #4
 8005010:	d109      	bne.n	8005026 <HAL_TIMEx_PWMN_Start+0x3e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b01      	cmp	r3, #1
 800501c:	bf14      	ite	ne
 800501e:	2301      	movne	r3, #1
 8005020:	2300      	moveq	r3, #0
 8005022:	b2db      	uxtb	r3, r3
 8005024:	e015      	b.n	8005052 <HAL_TIMEx_PWMN_Start+0x6a>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b08      	cmp	r3, #8
 800502a:	d109      	bne.n	8005040 <HAL_TIMEx_PWMN_Start+0x58>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	bf14      	ite	ne
 8005038:	2301      	movne	r3, #1
 800503a:	2300      	moveq	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	e008      	b.n	8005052 <HAL_TIMEx_PWMN_Start+0x6a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e05a      	b.n	8005110 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d104      	bne.n	800506a <HAL_TIMEx_PWMN_Start+0x82>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005068:	e013      	b.n	8005092 <HAL_TIMEx_PWMN_Start+0xaa>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d104      	bne.n	800507a <HAL_TIMEx_PWMN_Start+0x92>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005078:	e00b      	b.n	8005092 <HAL_TIMEx_PWMN_Start+0xaa>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b08      	cmp	r3, #8
 800507e:	d104      	bne.n	800508a <HAL_TIMEx_PWMN_Start+0xa2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005088:	e003      	b.n	8005092 <HAL_TIMEx_PWMN_Start+0xaa>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2202      	movs	r2, #2
 800508e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2204      	movs	r2, #4
 8005098:	6839      	ldr	r1, [r7, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f99c 	bl	80053d8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a18      	ldr	r2, [pc, #96]	; (8005118 <HAL_TIMEx_PWMN_Start+0x130>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d009      	beq.n	80050ce <HAL_TIMEx_PWMN_Start+0xe6>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c2:	d004      	beq.n	80050ce <HAL_TIMEx_PWMN_Start+0xe6>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a14      	ldr	r2, [pc, #80]	; (800511c <HAL_TIMEx_PWMN_Start+0x134>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d115      	bne.n	80050fa <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	4b12      	ldr	r3, [pc, #72]	; (8005120 <HAL_TIMEx_PWMN_Start+0x138>)
 80050d6:	4013      	ands	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b06      	cmp	r3, #6
 80050de:	d015      	beq.n	800510c <HAL_TIMEx_PWMN_Start+0x124>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e6:	d011      	beq.n	800510c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f8:	e008      	b.n	800510c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0201 	orr.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e000      	b.n	800510e <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40012c00 	.word	0x40012c00
 800511c:	40014000 	.word	0x40014000
 8005120:	00010007 	.word	0x00010007

08005124 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2200      	movs	r2, #0
 8005134:	6839      	ldr	r1, [r7, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 f94e 	bl	80053d8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a1a      	ldr	r2, [r3, #32]
 8005142:	f241 1311 	movw	r3, #4369	; 0x1111
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10f      	bne.n	800516c <HAL_TIMEx_PWMN_Stop+0x48>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6a1a      	ldr	r2, [r3, #32]
 8005152:	f240 4344 	movw	r3, #1092	; 0x444
 8005156:	4013      	ands	r3, r2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d107      	bne.n	800516c <HAL_TIMEx_PWMN_Stop+0x48>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800516a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6a1a      	ldr	r2, [r3, #32]
 8005172:	f241 1311 	movw	r3, #4369	; 0x1111
 8005176:	4013      	ands	r3, r2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10f      	bne.n	800519c <HAL_TIMEx_PWMN_Stop+0x78>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6a1a      	ldr	r2, [r3, #32]
 8005182:	f240 4344 	movw	r3, #1092	; 0x444
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d107      	bne.n	800519c <HAL_TIMEx_PWMN_Stop+0x78>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0201 	bic.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <HAL_TIMEx_PWMN_Stop+0x88>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051aa:	e013      	b.n	80051d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d104      	bne.n	80051bc <HAL_TIMEx_PWMN_Stop+0x98>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051ba:	e00b      	b.n	80051d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d104      	bne.n	80051cc <HAL_TIMEx_PWMN_Stop+0xa8>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051ca:	e003      	b.n	80051d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e04f      	b.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d108      	bne.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005228:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a14      	ldr	r2, [pc, #80]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d009      	beq.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005260:	d004      	beq.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a10      	ldr	r2, [pc, #64]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d10c      	bne.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005272:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	4313      	orrs	r3, r2
 800527c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	40012c00 	.word	0x40012c00
 80052a8:	40014000 	.word	0x40014000

080052ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e060      	b.n	800538a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a14      	ldr	r2, [pc, #80]	; (8005398 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d115      	bne.n	8005378 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	051b      	lsls	r3, r3, #20
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40012c00 	.word	0x40012c00

0800539c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	2204      	movs	r2, #4
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	43db      	mvns	r3, r3
 80053fa:	401a      	ands	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a1a      	ldr	r2, [r3, #32]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	fa01 f303 	lsl.w	r3, r1, r3
 8005410:	431a      	orrs	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
}
 8005416:	bf00      	nop
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e040      	b.n	80054b6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005438:	2b00      	cmp	r3, #0
 800543a:	d106      	bne.n	800544a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7fb fe85 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2224      	movs	r2, #36	; 0x24
 800544e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0201 	bic.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f991 	bl	8005788 <UART_SetConfig>
 8005466:	4603      	mov	r3, r0
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e022      	b.n	80054b6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fb91 	bl	8005ba0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800548c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800549c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0201 	orr.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fc18 	bl	8005ce4 <UART_CheckIdleState>
 80054b4:	4603      	mov	r3, r0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b08a      	sub	sp, #40	; 0x28
 80054c2:	af02      	add	r7, sp, #8
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	603b      	str	r3, [r7, #0]
 80054ca:	4613      	mov	r3, r2
 80054cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	f040 8082 	bne.w	80055dc <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_UART_Transmit+0x26>
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e07a      	b.n	80055de <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_UART_Transmit+0x38>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e073      	b.n	80055de <HAL_UART_Transmit+0x120>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2221      	movs	r2, #33	; 0x21
 800550a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800550c:	f7fb ff78 	bl	8001400 <HAL_GetTick>
 8005510:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	88fa      	ldrh	r2, [r7, #6]
 8005516:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	88fa      	ldrh	r2, [r7, #6]
 800551e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552a:	d108      	bne.n	800553e <HAL_UART_Transmit+0x80>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005534:	2300      	movs	r3, #0
 8005536:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	61bb      	str	r3, [r7, #24]
 800553c:	e003      	b.n	8005546 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800554e:	e02d      	b.n	80055ac <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2200      	movs	r2, #0
 8005558:	2180      	movs	r1, #128	; 0x80
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 fc0b 	bl	8005d76 <UART_WaitOnFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e039      	b.n	80055de <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	881a      	ldrh	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800557c:	b292      	uxth	r2, r2
 800557e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	3302      	adds	r3, #2
 8005584:	61bb      	str	r3, [r7, #24]
 8005586:	e008      	b.n	800559a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	781a      	ldrb	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	b292      	uxth	r2, r2
 8005592:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	3301      	adds	r3, #1
 8005598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1cb      	bne.n	8005550 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2200      	movs	r2, #0
 80055c0:	2140      	movs	r1, #64	; 0x40
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 fbd7 	bl	8005d76 <UART_WaitOnFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e005      	b.n	80055de <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2220      	movs	r2, #32
 80055d6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	e000      	b.n	80055de <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80055dc:	2302      	movs	r3, #2
  }
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b08a      	sub	sp, #40	; 0x28
 80055ea:	af02      	add	r7, sp, #8
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	603b      	str	r3, [r7, #0]
 80055f2:	4613      	mov	r3, r2
 80055f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	f040 80bf 	bne.w	800577e <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_UART_Receive+0x26>
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0b7      	b.n	8005780 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_UART_Receive+0x38>
 800561a:	2302      	movs	r3, #2
 800561c:	e0b0      	b.n	8005780 <HAL_UART_Receive+0x19a>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2222      	movs	r2, #34	; 0x22
 8005632:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800563a:	f7fb fee1 	bl	8001400 <HAL_GetTick>
 800563e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	88fa      	ldrh	r2, [r7, #6]
 8005644:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	88fa      	ldrh	r2, [r7, #6]
 800564c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005658:	d10e      	bne.n	8005678 <HAL_UART_Receive+0x92>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d105      	bne.n	800566e <HAL_UART_Receive+0x88>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005668:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800566c:	e02d      	b.n	80056ca <HAL_UART_Receive+0xe4>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	22ff      	movs	r2, #255	; 0xff
 8005672:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005676:	e028      	b.n	80056ca <HAL_UART_Receive+0xe4>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10d      	bne.n	800569c <HAL_UART_Receive+0xb6>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d104      	bne.n	8005692 <HAL_UART_Receive+0xac>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	22ff      	movs	r2, #255	; 0xff
 800568c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005690:	e01b      	b.n	80056ca <HAL_UART_Receive+0xe4>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	227f      	movs	r2, #127	; 0x7f
 8005696:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800569a:	e016      	b.n	80056ca <HAL_UART_Receive+0xe4>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056a4:	d10d      	bne.n	80056c2 <HAL_UART_Receive+0xdc>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d104      	bne.n	80056b8 <HAL_UART_Receive+0xd2>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	227f      	movs	r2, #127	; 0x7f
 80056b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056b6:	e008      	b.n	80056ca <HAL_UART_Receive+0xe4>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	223f      	movs	r2, #63	; 0x3f
 80056bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056c0:	e003      	b.n	80056ca <HAL_UART_Receive+0xe4>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056d0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056da:	d108      	bne.n	80056ee <HAL_UART_Receive+0x108>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80056e4:	2300      	movs	r3, #0
 80056e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	61bb      	str	r3, [r7, #24]
 80056ec:	e003      	b.n	80056f6 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056fe:	e033      	b.n	8005768 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2200      	movs	r2, #0
 8005708:	2120      	movs	r1, #32
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 fb33 	bl	8005d76 <UART_WaitOnFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e032      	b.n	8005780 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10c      	bne.n	800573a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005726:	b29a      	uxth	r2, r3
 8005728:	8a7b      	ldrh	r3, [r7, #18]
 800572a:	4013      	ands	r3, r2
 800572c:	b29a      	uxth	r2, r3
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	3302      	adds	r3, #2
 8005736:	61bb      	str	r3, [r7, #24]
 8005738:	e00d      	b.n	8005756 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005740:	b29b      	uxth	r3, r3
 8005742:	b2da      	uxtb	r2, r3
 8005744:	8a7b      	ldrh	r3, [r7, #18]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	4013      	ands	r3, r2
 800574a:	b2da      	uxtb	r2, r3
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	3301      	adds	r3, #1
 8005754:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1c5      	bne.n	8005700 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	e000      	b.n	8005780 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800577e:	2302      	movs	r3, #2
  }
}
 8005780:	4618      	mov	r0, r3
 8005782:	3720      	adds	r7, #32
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005788:	b5b0      	push	{r4, r5, r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	431a      	orrs	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4baf      	ldr	r3, [pc, #700]	; (8005a70 <UART_SetConfig+0x2e8>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	69f9      	ldr	r1, [r7, #28]
 80057bc:	430b      	orrs	r3, r1
 80057be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4aa4      	ldr	r2, [pc, #656]	; (8005a74 <UART_SetConfig+0x2ec>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d004      	beq.n	80057f0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	430a      	orrs	r2, r1
 8005802:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a9b      	ldr	r2, [pc, #620]	; (8005a78 <UART_SetConfig+0x2f0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d121      	bne.n	8005852 <UART_SetConfig+0xca>
 800580e:	4b9b      	ldr	r3, [pc, #620]	; (8005a7c <UART_SetConfig+0x2f4>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f003 0303 	and.w	r3, r3, #3
 8005818:	2b03      	cmp	r3, #3
 800581a:	d817      	bhi.n	800584c <UART_SetConfig+0xc4>
 800581c:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <UART_SetConfig+0x9c>)
 800581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005822:	bf00      	nop
 8005824:	08005835 	.word	0x08005835
 8005828:	08005841 	.word	0x08005841
 800582c:	0800583b 	.word	0x0800583b
 8005830:	08005847 	.word	0x08005847
 8005834:	2301      	movs	r3, #1
 8005836:	76fb      	strb	r3, [r7, #27]
 8005838:	e070      	b.n	800591c <UART_SetConfig+0x194>
 800583a:	2302      	movs	r3, #2
 800583c:	76fb      	strb	r3, [r7, #27]
 800583e:	e06d      	b.n	800591c <UART_SetConfig+0x194>
 8005840:	2304      	movs	r3, #4
 8005842:	76fb      	strb	r3, [r7, #27]
 8005844:	e06a      	b.n	800591c <UART_SetConfig+0x194>
 8005846:	2308      	movs	r3, #8
 8005848:	76fb      	strb	r3, [r7, #27]
 800584a:	e067      	b.n	800591c <UART_SetConfig+0x194>
 800584c:	2310      	movs	r3, #16
 800584e:	76fb      	strb	r3, [r7, #27]
 8005850:	e064      	b.n	800591c <UART_SetConfig+0x194>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a8a      	ldr	r2, [pc, #552]	; (8005a80 <UART_SetConfig+0x2f8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d132      	bne.n	80058c2 <UART_SetConfig+0x13a>
 800585c:	4b87      	ldr	r3, [pc, #540]	; (8005a7c <UART_SetConfig+0x2f4>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005862:	f003 030c 	and.w	r3, r3, #12
 8005866:	2b0c      	cmp	r3, #12
 8005868:	d828      	bhi.n	80058bc <UART_SetConfig+0x134>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <UART_SetConfig+0xe8>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	080058a5 	.word	0x080058a5
 8005874:	080058bd 	.word	0x080058bd
 8005878:	080058bd 	.word	0x080058bd
 800587c:	080058bd 	.word	0x080058bd
 8005880:	080058b1 	.word	0x080058b1
 8005884:	080058bd 	.word	0x080058bd
 8005888:	080058bd 	.word	0x080058bd
 800588c:	080058bd 	.word	0x080058bd
 8005890:	080058ab 	.word	0x080058ab
 8005894:	080058bd 	.word	0x080058bd
 8005898:	080058bd 	.word	0x080058bd
 800589c:	080058bd 	.word	0x080058bd
 80058a0:	080058b7 	.word	0x080058b7
 80058a4:	2300      	movs	r3, #0
 80058a6:	76fb      	strb	r3, [r7, #27]
 80058a8:	e038      	b.n	800591c <UART_SetConfig+0x194>
 80058aa:	2302      	movs	r3, #2
 80058ac:	76fb      	strb	r3, [r7, #27]
 80058ae:	e035      	b.n	800591c <UART_SetConfig+0x194>
 80058b0:	2304      	movs	r3, #4
 80058b2:	76fb      	strb	r3, [r7, #27]
 80058b4:	e032      	b.n	800591c <UART_SetConfig+0x194>
 80058b6:	2308      	movs	r3, #8
 80058b8:	76fb      	strb	r3, [r7, #27]
 80058ba:	e02f      	b.n	800591c <UART_SetConfig+0x194>
 80058bc:	2310      	movs	r3, #16
 80058be:	76fb      	strb	r3, [r7, #27]
 80058c0:	e02c      	b.n	800591c <UART_SetConfig+0x194>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a6b      	ldr	r2, [pc, #428]	; (8005a74 <UART_SetConfig+0x2ec>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d125      	bne.n	8005918 <UART_SetConfig+0x190>
 80058cc:	4b6b      	ldr	r3, [pc, #428]	; (8005a7c <UART_SetConfig+0x2f4>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058da:	d017      	beq.n	800590c <UART_SetConfig+0x184>
 80058dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058e0:	d817      	bhi.n	8005912 <UART_SetConfig+0x18a>
 80058e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058e6:	d00b      	beq.n	8005900 <UART_SetConfig+0x178>
 80058e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ec:	d811      	bhi.n	8005912 <UART_SetConfig+0x18a>
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <UART_SetConfig+0x172>
 80058f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f6:	d006      	beq.n	8005906 <UART_SetConfig+0x17e>
 80058f8:	e00b      	b.n	8005912 <UART_SetConfig+0x18a>
 80058fa:	2300      	movs	r3, #0
 80058fc:	76fb      	strb	r3, [r7, #27]
 80058fe:	e00d      	b.n	800591c <UART_SetConfig+0x194>
 8005900:	2302      	movs	r3, #2
 8005902:	76fb      	strb	r3, [r7, #27]
 8005904:	e00a      	b.n	800591c <UART_SetConfig+0x194>
 8005906:	2304      	movs	r3, #4
 8005908:	76fb      	strb	r3, [r7, #27]
 800590a:	e007      	b.n	800591c <UART_SetConfig+0x194>
 800590c:	2308      	movs	r3, #8
 800590e:	76fb      	strb	r3, [r7, #27]
 8005910:	e004      	b.n	800591c <UART_SetConfig+0x194>
 8005912:	2310      	movs	r3, #16
 8005914:	76fb      	strb	r3, [r7, #27]
 8005916:	e001      	b.n	800591c <UART_SetConfig+0x194>
 8005918:	2310      	movs	r3, #16
 800591a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a54      	ldr	r2, [pc, #336]	; (8005a74 <UART_SetConfig+0x2ec>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d173      	bne.n	8005a0e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005926:	7efb      	ldrb	r3, [r7, #27]
 8005928:	2b08      	cmp	r3, #8
 800592a:	d824      	bhi.n	8005976 <UART_SetConfig+0x1ee>
 800592c:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <UART_SetConfig+0x1ac>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	08005959 	.word	0x08005959
 8005938:	08005977 	.word	0x08005977
 800593c:	08005961 	.word	0x08005961
 8005940:	08005977 	.word	0x08005977
 8005944:	08005967 	.word	0x08005967
 8005948:	08005977 	.word	0x08005977
 800594c:	08005977 	.word	0x08005977
 8005950:	08005977 	.word	0x08005977
 8005954:	0800596f 	.word	0x0800596f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005958:	f7fd ffee 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 800595c:	6178      	str	r0, [r7, #20]
        break;
 800595e:	e00f      	b.n	8005980 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005960:	4b48      	ldr	r3, [pc, #288]	; (8005a84 <UART_SetConfig+0x2fc>)
 8005962:	617b      	str	r3, [r7, #20]
        break;
 8005964:	e00c      	b.n	8005980 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005966:	f7fd ff4f 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 800596a:	6178      	str	r0, [r7, #20]
        break;
 800596c:	e008      	b.n	8005980 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800596e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005972:	617b      	str	r3, [r7, #20]
        break;
 8005974:	e004      	b.n	8005980 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	76bb      	strb	r3, [r7, #26]
        break;
 800597e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80fe 	beq.w	8005b84 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	4613      	mov	r3, r2
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	4413      	add	r3, r2
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	429a      	cmp	r2, r3
 8005996:	d305      	bcc.n	80059a4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d902      	bls.n	80059aa <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	76bb      	strb	r3, [r7, #26]
 80059a8:	e0ec      	b.n	8005b84 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f04f 0100 	mov.w	r1, #0
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	020b      	lsls	r3, r1, #8
 80059bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059c0:	0202      	lsls	r2, r0, #8
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	6849      	ldr	r1, [r1, #4]
 80059c6:	0849      	lsrs	r1, r1, #1
 80059c8:	4608      	mov	r0, r1
 80059ca:	f04f 0100 	mov.w	r1, #0
 80059ce:	1814      	adds	r4, r2, r0
 80059d0:	eb43 0501 	adc.w	r5, r3, r1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	461a      	mov	r2, r3
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	4620      	mov	r0, r4
 80059e0:	4629      	mov	r1, r5
 80059e2:	f7fa fbfb 	bl	80001dc <__aeabi_uldivmod>
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	4613      	mov	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059f4:	d308      	bcc.n	8005a08 <UART_SetConfig+0x280>
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059fc:	d204      	bcs.n	8005a08 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	60da      	str	r2, [r3, #12]
 8005a06:	e0bd      	b.n	8005b84 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	76bb      	strb	r3, [r7, #26]
 8005a0c:	e0ba      	b.n	8005b84 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a16:	d168      	bne.n	8005aea <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8005a18:	7efb      	ldrb	r3, [r7, #27]
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d834      	bhi.n	8005a88 <UART_SetConfig+0x300>
 8005a1e:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <UART_SetConfig+0x29c>)
 8005a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a24:	08005a49 	.word	0x08005a49
 8005a28:	08005a51 	.word	0x08005a51
 8005a2c:	08005a59 	.word	0x08005a59
 8005a30:	08005a89 	.word	0x08005a89
 8005a34:	08005a5f 	.word	0x08005a5f
 8005a38:	08005a89 	.word	0x08005a89
 8005a3c:	08005a89 	.word	0x08005a89
 8005a40:	08005a89 	.word	0x08005a89
 8005a44:	08005a67 	.word	0x08005a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a48:	f7fd ff76 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8005a4c:	6178      	str	r0, [r7, #20]
        break;
 8005a4e:	e020      	b.n	8005a92 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a50:	f7fd ff88 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 8005a54:	6178      	str	r0, [r7, #20]
        break;
 8005a56:	e01c      	b.n	8005a92 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <UART_SetConfig+0x2fc>)
 8005a5a:	617b      	str	r3, [r7, #20]
        break;
 8005a5c:	e019      	b.n	8005a92 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a5e:	f7fd fed3 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 8005a62:	6178      	str	r0, [r7, #20]
        break;
 8005a64:	e015      	b.n	8005a92 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a6a:	617b      	str	r3, [r7, #20]
        break;
 8005a6c:	e011      	b.n	8005a92 <UART_SetConfig+0x30a>
 8005a6e:	bf00      	nop
 8005a70:	efff69f3 	.word	0xefff69f3
 8005a74:	40008000 	.word	0x40008000
 8005a78:	40013800 	.word	0x40013800
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	40004400 	.word	0x40004400
 8005a84:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	76bb      	strb	r3, [r7, #26]
        break;
 8005a90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d075      	beq.n	8005b84 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	005a      	lsls	r2, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	085b      	lsrs	r3, r3, #1
 8005aa2:	441a      	add	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b0f      	cmp	r3, #15
 8005ab4:	d916      	bls.n	8005ae4 <UART_SetConfig+0x35c>
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005abc:	d212      	bcs.n	8005ae4 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f023 030f 	bic.w	r3, r3, #15
 8005ac6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	085b      	lsrs	r3, r3, #1
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	89fb      	ldrh	r3, [r7, #14]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	89fa      	ldrh	r2, [r7, #14]
 8005ae0:	60da      	str	r2, [r3, #12]
 8005ae2:	e04f      	b.n	8005b84 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	76bb      	strb	r3, [r7, #26]
 8005ae8:	e04c      	b.n	8005b84 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aea:	7efb      	ldrb	r3, [r7, #27]
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d828      	bhi.n	8005b42 <UART_SetConfig+0x3ba>
 8005af0:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <UART_SetConfig+0x370>)
 8005af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af6:	bf00      	nop
 8005af8:	08005b1d 	.word	0x08005b1d
 8005afc:	08005b25 	.word	0x08005b25
 8005b00:	08005b2d 	.word	0x08005b2d
 8005b04:	08005b43 	.word	0x08005b43
 8005b08:	08005b33 	.word	0x08005b33
 8005b0c:	08005b43 	.word	0x08005b43
 8005b10:	08005b43 	.word	0x08005b43
 8005b14:	08005b43 	.word	0x08005b43
 8005b18:	08005b3b 	.word	0x08005b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b1c:	f7fd ff0c 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8005b20:	6178      	str	r0, [r7, #20]
        break;
 8005b22:	e013      	b.n	8005b4c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b24:	f7fd ff1e 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 8005b28:	6178      	str	r0, [r7, #20]
        break;
 8005b2a:	e00f      	b.n	8005b4c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b2c:	4b1b      	ldr	r3, [pc, #108]	; (8005b9c <UART_SetConfig+0x414>)
 8005b2e:	617b      	str	r3, [r7, #20]
        break;
 8005b30:	e00c      	b.n	8005b4c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b32:	f7fd fe69 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 8005b36:	6178      	str	r0, [r7, #20]
        break;
 8005b38:	e008      	b.n	8005b4c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b3e:	617b      	str	r3, [r7, #20]
        break;
 8005b40:	e004      	b.n	8005b4c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	76bb      	strb	r3, [r7, #26]
        break;
 8005b4a:	bf00      	nop
    }

    if (pclk != 0U)
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d018      	beq.n	8005b84 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	085a      	lsrs	r2, r3, #1
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	441a      	add	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2b0f      	cmp	r3, #15
 8005b6c:	d908      	bls.n	8005b80 <UART_SetConfig+0x3f8>
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b74:	d204      	bcs.n	8005b80 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	e001      	b.n	8005b84 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b90:	7ebb      	ldrb	r3, [r7, #26]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3720      	adds	r7, #32
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bdb0      	pop	{r4, r5, r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	00f42400 	.word	0x00f42400

08005ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00a      	beq.n	8005bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01a      	beq.n	8005cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9e:	d10a      	bne.n	8005cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	605a      	str	r2, [r3, #4]
  }
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cf4:	f7fb fb84 	bl	8001400 <HAL_GetTick>
 8005cf8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d10e      	bne.n	8005d26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f82d 	bl	8005d76 <UART_WaitOnFlagUntilTimeout>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e023      	b.n	8005d6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d10e      	bne.n	8005d52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f817 	bl	8005d76 <UART_WaitOnFlagUntilTimeout>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e00d      	b.n	8005d6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	603b      	str	r3, [r7, #0]
 8005d82:	4613      	mov	r3, r2
 8005d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d86:	e05e      	b.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d8e:	d05a      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d90:	f7fb fb36 	bl	8001400 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d302      	bcc.n	8005da6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d11b      	bne.n	8005dde <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005db4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0201 	bic.w	r2, r2, #1
 8005dc4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e043      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d02c      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfa:	d124      	bne.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e04:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e14:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0201 	bic.w	r2, r2, #1
 8005e24:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e00f      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69da      	ldr	r2, [r3, #28]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	bf0c      	ite	eq
 8005e56:	2301      	moveq	r3, #1
 8005e58:	2300      	movne	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d091      	beq.n	8005d88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <atoi>:
 8005e6e:	220a      	movs	r2, #10
 8005e70:	2100      	movs	r1, #0
 8005e72:	f000 b8d1 	b.w	8006018 <strtol>
	...

08005e78 <__errno>:
 8005e78:	4b01      	ldr	r3, [pc, #4]	; (8005e80 <__errno+0x8>)
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	20000010 	.word	0x20000010

08005e84 <__libc_init_array>:
 8005e84:	b570      	push	{r4, r5, r6, lr}
 8005e86:	4d0d      	ldr	r5, [pc, #52]	; (8005ebc <__libc_init_array+0x38>)
 8005e88:	4c0d      	ldr	r4, [pc, #52]	; (8005ec0 <__libc_init_array+0x3c>)
 8005e8a:	1b64      	subs	r4, r4, r5
 8005e8c:	10a4      	asrs	r4, r4, #2
 8005e8e:	2600      	movs	r6, #0
 8005e90:	42a6      	cmp	r6, r4
 8005e92:	d109      	bne.n	8005ea8 <__libc_init_array+0x24>
 8005e94:	4d0b      	ldr	r5, [pc, #44]	; (8005ec4 <__libc_init_array+0x40>)
 8005e96:	4c0c      	ldr	r4, [pc, #48]	; (8005ec8 <__libc_init_array+0x44>)
 8005e98:	f000 f90a 	bl	80060b0 <_init>
 8005e9c:	1b64      	subs	r4, r4, r5
 8005e9e:	10a4      	asrs	r4, r4, #2
 8005ea0:	2600      	movs	r6, #0
 8005ea2:	42a6      	cmp	r6, r4
 8005ea4:	d105      	bne.n	8005eb2 <__libc_init_array+0x2e>
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}
 8005ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eac:	4798      	blx	r3
 8005eae:	3601      	adds	r6, #1
 8005eb0:	e7ee      	b.n	8005e90 <__libc_init_array+0xc>
 8005eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb6:	4798      	blx	r3
 8005eb8:	3601      	adds	r6, #1
 8005eba:	e7f2      	b.n	8005ea2 <__libc_init_array+0x1e>
 8005ebc:	0800668c 	.word	0x0800668c
 8005ec0:	0800668c 	.word	0x0800668c
 8005ec4:	0800668c 	.word	0x0800668c
 8005ec8:	08006690 	.word	0x08006690

08005ecc <__itoa>:
 8005ecc:	1e93      	subs	r3, r2, #2
 8005ece:	2b22      	cmp	r3, #34	; 0x22
 8005ed0:	b510      	push	{r4, lr}
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	d904      	bls.n	8005ee0 <__itoa+0x14>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	700b      	strb	r3, [r1, #0]
 8005eda:	461c      	mov	r4, r3
 8005edc:	4620      	mov	r0, r4
 8005ede:	bd10      	pop	{r4, pc}
 8005ee0:	2a0a      	cmp	r2, #10
 8005ee2:	d109      	bne.n	8005ef8 <__itoa+0x2c>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	da07      	bge.n	8005ef8 <__itoa+0x2c>
 8005ee8:	232d      	movs	r3, #45	; 0x2d
 8005eea:	700b      	strb	r3, [r1, #0]
 8005eec:	4240      	negs	r0, r0
 8005eee:	2101      	movs	r1, #1
 8005ef0:	4421      	add	r1, r4
 8005ef2:	f000 f89b 	bl	800602c <__utoa>
 8005ef6:	e7f1      	b.n	8005edc <__itoa+0x10>
 8005ef8:	2100      	movs	r1, #0
 8005efa:	e7f9      	b.n	8005ef0 <__itoa+0x24>

08005efc <itoa>:
 8005efc:	f7ff bfe6 	b.w	8005ecc <__itoa>

08005f00 <memset>:
 8005f00:	4402      	add	r2, r0
 8005f02:	4603      	mov	r3, r0
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d100      	bne.n	8005f0a <memset+0xa>
 8005f08:	4770      	bx	lr
 8005f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f0e:	e7f9      	b.n	8005f04 <memset+0x4>

08005f10 <_strtol_l.isra.0>:
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f16:	d001      	beq.n	8005f1c <_strtol_l.isra.0+0xc>
 8005f18:	2b24      	cmp	r3, #36	; 0x24
 8005f1a:	d906      	bls.n	8005f2a <_strtol_l.isra.0+0x1a>
 8005f1c:	f7ff ffac 	bl	8005e78 <__errno>
 8005f20:	2316      	movs	r3, #22
 8005f22:	6003      	str	r3, [r0, #0]
 8005f24:	2000      	movs	r0, #0
 8005f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f2a:	4f3a      	ldr	r7, [pc, #232]	; (8006014 <_strtol_l.isra.0+0x104>)
 8005f2c:	468e      	mov	lr, r1
 8005f2e:	4676      	mov	r6, lr
 8005f30:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005f34:	5de5      	ldrb	r5, [r4, r7]
 8005f36:	f015 0508 	ands.w	r5, r5, #8
 8005f3a:	d1f8      	bne.n	8005f2e <_strtol_l.isra.0+0x1e>
 8005f3c:	2c2d      	cmp	r4, #45	; 0x2d
 8005f3e:	d134      	bne.n	8005faa <_strtol_l.isra.0+0x9a>
 8005f40:	f89e 4000 	ldrb.w	r4, [lr]
 8005f44:	f04f 0801 	mov.w	r8, #1
 8005f48:	f106 0e02 	add.w	lr, r6, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d05c      	beq.n	800600a <_strtol_l.isra.0+0xfa>
 8005f50:	2b10      	cmp	r3, #16
 8005f52:	d10c      	bne.n	8005f6e <_strtol_l.isra.0+0x5e>
 8005f54:	2c30      	cmp	r4, #48	; 0x30
 8005f56:	d10a      	bne.n	8005f6e <_strtol_l.isra.0+0x5e>
 8005f58:	f89e 4000 	ldrb.w	r4, [lr]
 8005f5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005f60:	2c58      	cmp	r4, #88	; 0x58
 8005f62:	d14d      	bne.n	8006000 <_strtol_l.isra.0+0xf0>
 8005f64:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005f68:	2310      	movs	r3, #16
 8005f6a:	f10e 0e02 	add.w	lr, lr, #2
 8005f6e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005f72:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8005f76:	2600      	movs	r6, #0
 8005f78:	fbbc f9f3 	udiv	r9, ip, r3
 8005f7c:	4635      	mov	r5, r6
 8005f7e:	fb03 ca19 	mls	sl, r3, r9, ip
 8005f82:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005f86:	2f09      	cmp	r7, #9
 8005f88:	d818      	bhi.n	8005fbc <_strtol_l.isra.0+0xac>
 8005f8a:	463c      	mov	r4, r7
 8005f8c:	42a3      	cmp	r3, r4
 8005f8e:	dd24      	ble.n	8005fda <_strtol_l.isra.0+0xca>
 8005f90:	2e00      	cmp	r6, #0
 8005f92:	db1f      	blt.n	8005fd4 <_strtol_l.isra.0+0xc4>
 8005f94:	45a9      	cmp	r9, r5
 8005f96:	d31d      	bcc.n	8005fd4 <_strtol_l.isra.0+0xc4>
 8005f98:	d101      	bne.n	8005f9e <_strtol_l.isra.0+0x8e>
 8005f9a:	45a2      	cmp	sl, r4
 8005f9c:	db1a      	blt.n	8005fd4 <_strtol_l.isra.0+0xc4>
 8005f9e:	fb05 4503 	mla	r5, r5, r3, r4
 8005fa2:	2601      	movs	r6, #1
 8005fa4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005fa8:	e7eb      	b.n	8005f82 <_strtol_l.isra.0+0x72>
 8005faa:	2c2b      	cmp	r4, #43	; 0x2b
 8005fac:	bf08      	it	eq
 8005fae:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005fb2:	46a8      	mov	r8, r5
 8005fb4:	bf08      	it	eq
 8005fb6:	f106 0e02 	addeq.w	lr, r6, #2
 8005fba:	e7c7      	b.n	8005f4c <_strtol_l.isra.0+0x3c>
 8005fbc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005fc0:	2f19      	cmp	r7, #25
 8005fc2:	d801      	bhi.n	8005fc8 <_strtol_l.isra.0+0xb8>
 8005fc4:	3c37      	subs	r4, #55	; 0x37
 8005fc6:	e7e1      	b.n	8005f8c <_strtol_l.isra.0+0x7c>
 8005fc8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005fcc:	2f19      	cmp	r7, #25
 8005fce:	d804      	bhi.n	8005fda <_strtol_l.isra.0+0xca>
 8005fd0:	3c57      	subs	r4, #87	; 0x57
 8005fd2:	e7db      	b.n	8005f8c <_strtol_l.isra.0+0x7c>
 8005fd4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005fd8:	e7e4      	b.n	8005fa4 <_strtol_l.isra.0+0x94>
 8005fda:	2e00      	cmp	r6, #0
 8005fdc:	da05      	bge.n	8005fea <_strtol_l.isra.0+0xda>
 8005fde:	2322      	movs	r3, #34	; 0x22
 8005fe0:	6003      	str	r3, [r0, #0]
 8005fe2:	4665      	mov	r5, ip
 8005fe4:	b942      	cbnz	r2, 8005ff8 <_strtol_l.isra.0+0xe8>
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	e79d      	b.n	8005f26 <_strtol_l.isra.0+0x16>
 8005fea:	f1b8 0f00 	cmp.w	r8, #0
 8005fee:	d000      	beq.n	8005ff2 <_strtol_l.isra.0+0xe2>
 8005ff0:	426d      	negs	r5, r5
 8005ff2:	2a00      	cmp	r2, #0
 8005ff4:	d0f7      	beq.n	8005fe6 <_strtol_l.isra.0+0xd6>
 8005ff6:	b10e      	cbz	r6, 8005ffc <_strtol_l.isra.0+0xec>
 8005ff8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8005ffc:	6011      	str	r1, [r2, #0]
 8005ffe:	e7f2      	b.n	8005fe6 <_strtol_l.isra.0+0xd6>
 8006000:	2430      	movs	r4, #48	; 0x30
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1b3      	bne.n	8005f6e <_strtol_l.isra.0+0x5e>
 8006006:	2308      	movs	r3, #8
 8006008:	e7b1      	b.n	8005f6e <_strtol_l.isra.0+0x5e>
 800600a:	2c30      	cmp	r4, #48	; 0x30
 800600c:	d0a4      	beq.n	8005f58 <_strtol_l.isra.0+0x48>
 800600e:	230a      	movs	r3, #10
 8006010:	e7ad      	b.n	8005f6e <_strtol_l.isra.0+0x5e>
 8006012:	bf00      	nop
 8006014:	08006582 	.word	0x08006582

08006018 <strtol>:
 8006018:	4613      	mov	r3, r2
 800601a:	460a      	mov	r2, r1
 800601c:	4601      	mov	r1, r0
 800601e:	4802      	ldr	r0, [pc, #8]	; (8006028 <strtol+0x10>)
 8006020:	6800      	ldr	r0, [r0, #0]
 8006022:	f7ff bf75 	b.w	8005f10 <_strtol_l.isra.0>
 8006026:	bf00      	nop
 8006028:	20000010 	.word	0x20000010

0800602c <__utoa>:
 800602c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800602e:	4c1f      	ldr	r4, [pc, #124]	; (80060ac <__utoa+0x80>)
 8006030:	b08b      	sub	sp, #44	; 0x2c
 8006032:	4605      	mov	r5, r0
 8006034:	460b      	mov	r3, r1
 8006036:	466e      	mov	r6, sp
 8006038:	f104 0c20 	add.w	ip, r4, #32
 800603c:	6820      	ldr	r0, [r4, #0]
 800603e:	6861      	ldr	r1, [r4, #4]
 8006040:	4637      	mov	r7, r6
 8006042:	c703      	stmia	r7!, {r0, r1}
 8006044:	3408      	adds	r4, #8
 8006046:	4564      	cmp	r4, ip
 8006048:	463e      	mov	r6, r7
 800604a:	d1f7      	bne.n	800603c <__utoa+0x10>
 800604c:	7921      	ldrb	r1, [r4, #4]
 800604e:	7139      	strb	r1, [r7, #4]
 8006050:	1e91      	subs	r1, r2, #2
 8006052:	6820      	ldr	r0, [r4, #0]
 8006054:	6038      	str	r0, [r7, #0]
 8006056:	2922      	cmp	r1, #34	; 0x22
 8006058:	f04f 0100 	mov.w	r1, #0
 800605c:	d904      	bls.n	8006068 <__utoa+0x3c>
 800605e:	7019      	strb	r1, [r3, #0]
 8006060:	460b      	mov	r3, r1
 8006062:	4618      	mov	r0, r3
 8006064:	b00b      	add	sp, #44	; 0x2c
 8006066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006068:	1e58      	subs	r0, r3, #1
 800606a:	4684      	mov	ip, r0
 800606c:	fbb5 f7f2 	udiv	r7, r5, r2
 8006070:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006074:	fb02 5617 	mls	r6, r2, r7, r5
 8006078:	4476      	add	r6, lr
 800607a:	460c      	mov	r4, r1
 800607c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006080:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006084:	462e      	mov	r6, r5
 8006086:	42b2      	cmp	r2, r6
 8006088:	f101 0101 	add.w	r1, r1, #1
 800608c:	463d      	mov	r5, r7
 800608e:	d9ed      	bls.n	800606c <__utoa+0x40>
 8006090:	2200      	movs	r2, #0
 8006092:	545a      	strb	r2, [r3, r1]
 8006094:	1919      	adds	r1, r3, r4
 8006096:	1aa5      	subs	r5, r4, r2
 8006098:	42aa      	cmp	r2, r5
 800609a:	dae2      	bge.n	8006062 <__utoa+0x36>
 800609c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80060a0:	780e      	ldrb	r6, [r1, #0]
 80060a2:	7006      	strb	r6, [r0, #0]
 80060a4:	3201      	adds	r2, #1
 80060a6:	f801 5901 	strb.w	r5, [r1], #-1
 80060aa:	e7f4      	b.n	8006096 <__utoa+0x6a>
 80060ac:	0800655c 	.word	0x0800655c

080060b0 <_init>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	bf00      	nop
 80060b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b6:	bc08      	pop	{r3}
 80060b8:	469e      	mov	lr, r3
 80060ba:	4770      	bx	lr

080060bc <_fini>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	bf00      	nop
 80060c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c2:	bc08      	pop	{r3}
 80060c4:	469e      	mov	lr, r3
 80060c6:	4770      	bx	lr
